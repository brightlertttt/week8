
week8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fe0  08003fe0  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fe8  08003fe8  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe8  08003fe8  00013fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08003ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000168  08004154  00020168  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004154  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008471  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ad  00000000  00000000  00028605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  00029db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  0002a490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000158f7  00000000  00000000  0002aae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ce9  00000000  00000000  000403d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085af8  00000000  00000000  000480c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cdbb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002014  00000000  00000000  000cdc0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000168 	.word	0x20000168
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003f44 	.word	0x08003f44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000016c 	.word	0x2000016c
 80001dc:	08003f44 	.word	0x08003f44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_frsub>:
 8000acc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ad0:	e002      	b.n	8000ad8 <__addsf3>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_fsub>:
 8000ad4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad8 <__addsf3>:
 8000ad8:	0042      	lsls	r2, r0, #1
 8000ada:	bf1f      	itttt	ne
 8000adc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ae0:	ea92 0f03 	teqne	r2, r3
 8000ae4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aec:	d06a      	beq.n	8000bc4 <__addsf3+0xec>
 8000aee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000af2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af6:	bfc1      	itttt	gt
 8000af8:	18d2      	addgt	r2, r2, r3
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	4048      	eorgt	r0, r1
 8000afe:	4041      	eorgt	r1, r0
 8000b00:	bfb8      	it	lt
 8000b02:	425b      	neglt	r3, r3
 8000b04:	2b19      	cmp	r3, #25
 8000b06:	bf88      	it	hi
 8000b08:	4770      	bxhi	lr
 8000b0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b16:	bf18      	it	ne
 8000b18:	4240      	negne	r0, r0
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4249      	negne	r1, r1
 8000b2a:	ea92 0f03 	teq	r2, r3
 8000b2e:	d03f      	beq.n	8000bb0 <__addsf3+0xd8>
 8000b30:	f1a2 0201 	sub.w	r2, r2, #1
 8000b34:	fa41 fc03 	asr.w	ip, r1, r3
 8000b38:	eb10 000c 	adds.w	r0, r0, ip
 8000b3c:	f1c3 0320 	rsb	r3, r3, #32
 8000b40:	fa01 f103 	lsl.w	r1, r1, r3
 8000b44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__addsf3+0x78>
 8000b4a:	4249      	negs	r1, r1
 8000b4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b54:	d313      	bcc.n	8000b7e <__addsf3+0xa6>
 8000b56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b5a:	d306      	bcc.n	8000b6a <__addsf3+0x92>
 8000b5c:	0840      	lsrs	r0, r0, #1
 8000b5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b62:	f102 0201 	add.w	r2, r2, #1
 8000b66:	2afe      	cmp	r2, #254	; 0xfe
 8000b68:	d251      	bcs.n	8000c0e <__addsf3+0x136>
 8000b6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b72:	bf08      	it	eq
 8000b74:	f020 0001 	biceq.w	r0, r0, #1
 8000b78:	ea40 0003 	orr.w	r0, r0, r3
 8000b7c:	4770      	bx	lr
 8000b7e:	0049      	lsls	r1, r1, #1
 8000b80:	eb40 0000 	adc.w	r0, r0, r0
 8000b84:	3a01      	subs	r2, #1
 8000b86:	bf28      	it	cs
 8000b88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b8c:	d2ed      	bcs.n	8000b6a <__addsf3+0x92>
 8000b8e:	fab0 fc80 	clz	ip, r0
 8000b92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b96:	ebb2 020c 	subs.w	r2, r2, ip
 8000b9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9e:	bfaa      	itet	ge
 8000ba0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba4:	4252      	neglt	r2, r2
 8000ba6:	4318      	orrge	r0, r3
 8000ba8:	bfbc      	itt	lt
 8000baa:	40d0      	lsrlt	r0, r2
 8000bac:	4318      	orrlt	r0, r3
 8000bae:	4770      	bx	lr
 8000bb0:	f092 0f00 	teq	r2, #0
 8000bb4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb8:	bf06      	itte	eq
 8000bba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bbe:	3201      	addeq	r2, #1
 8000bc0:	3b01      	subne	r3, #1
 8000bc2:	e7b5      	b.n	8000b30 <__addsf3+0x58>
 8000bc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bcc:	bf18      	it	ne
 8000bce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd2:	d021      	beq.n	8000c18 <__addsf3+0x140>
 8000bd4:	ea92 0f03 	teq	r2, r3
 8000bd8:	d004      	beq.n	8000be4 <__addsf3+0x10c>
 8000bda:	f092 0f00 	teq	r2, #0
 8000bde:	bf08      	it	eq
 8000be0:	4608      	moveq	r0, r1
 8000be2:	4770      	bx	lr
 8000be4:	ea90 0f01 	teq	r0, r1
 8000be8:	bf1c      	itt	ne
 8000bea:	2000      	movne	r0, #0
 8000bec:	4770      	bxne	lr
 8000bee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bf2:	d104      	bne.n	8000bfe <__addsf3+0x126>
 8000bf4:	0040      	lsls	r0, r0, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bfc:	4770      	bx	lr
 8000bfe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c02:	bf3c      	itt	cc
 8000c04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bxcc	lr
 8000c0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c16:	4770      	bx	lr
 8000c18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c1c:	bf16      	itet	ne
 8000c1e:	4608      	movne	r0, r1
 8000c20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c24:	4601      	movne	r1, r0
 8000c26:	0242      	lsls	r2, r0, #9
 8000c28:	bf06      	itte	eq
 8000c2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2e:	ea90 0f01 	teqeq	r0, r1
 8000c32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_ui2f>:
 8000c38:	f04f 0300 	mov.w	r3, #0
 8000c3c:	e004      	b.n	8000c48 <__aeabi_i2f+0x8>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_i2f>:
 8000c40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c44:	bf48      	it	mi
 8000c46:	4240      	negmi	r0, r0
 8000c48:	ea5f 0c00 	movs.w	ip, r0
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c54:	4601      	mov	r1, r0
 8000c56:	f04f 0000 	mov.w	r0, #0
 8000c5a:	e01c      	b.n	8000c96 <__aeabi_l2f+0x2a>

08000c5c <__aeabi_ul2f>:
 8000c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c60:	bf08      	it	eq
 8000c62:	4770      	bxeq	lr
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	e00a      	b.n	8000c80 <__aeabi_l2f+0x14>
 8000c6a:	bf00      	nop

08000c6c <__aeabi_l2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c78:	d502      	bpl.n	8000c80 <__aeabi_l2f+0x14>
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	ea5f 0c01 	movs.w	ip, r1
 8000c84:	bf02      	ittt	eq
 8000c86:	4684      	moveq	ip, r0
 8000c88:	4601      	moveq	r1, r0
 8000c8a:	2000      	moveq	r0, #0
 8000c8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c90:	bf08      	it	eq
 8000c92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c9a:	fabc f28c 	clz	r2, ip
 8000c9e:	3a08      	subs	r2, #8
 8000ca0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca4:	db10      	blt.n	8000cc8 <__aeabi_l2f+0x5c>
 8000ca6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000caa:	4463      	add	r3, ip
 8000cac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	f020 0001 	biceq.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	f102 0220 	add.w	r2, r2, #32
 8000ccc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b96e 	b.w	8000fdc <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	4604      	mov	r4, r0
 8000d20:	468c      	mov	ip, r1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8083 	bne.w	8000e2e <__udivmoddi4+0x116>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	4617      	mov	r7, r2
 8000d2c:	d947      	bls.n	8000dbe <__udivmoddi4+0xa6>
 8000d2e:	fab2 f282 	clz	r2, r2
 8000d32:	b142      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d34:	f1c2 0020 	rsb	r0, r2, #32
 8000d38:	fa24 f000 	lsr.w	r0, r4, r0
 8000d3c:	4091      	lsls	r1, r2
 8000d3e:	4097      	lsls	r7, r2
 8000d40:	ea40 0c01 	orr.w	ip, r0, r1
 8000d44:	4094      	lsls	r4, r2
 8000d46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d4a:	0c23      	lsrs	r3, r4, #16
 8000d4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d50:	fa1f fe87 	uxth.w	lr, r7
 8000d54:	fb08 c116 	mls	r1, r8, r6, ip
 8000d58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x60>
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d6a:	f080 8119 	bcs.w	8000fa0 <__udivmoddi4+0x288>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 8116 	bls.w	8000fa0 <__udivmoddi4+0x288>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	443b      	add	r3, r7
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x8c>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d96:	f080 8105 	bcs.w	8000fa4 <__udivmoddi4+0x28c>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f240 8102 	bls.w	8000fa4 <__udivmoddi4+0x28c>
 8000da0:	3802      	subs	r0, #2
 8000da2:	443c      	add	r4, r7
 8000da4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da8:	eba4 040e 	sub.w	r4, r4, lr
 8000dac:	2600      	movs	r6, #0
 8000dae:	b11d      	cbz	r5, 8000db8 <__udivmoddi4+0xa0>
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	2300      	movs	r3, #0
 8000db4:	e9c5 4300 	strd	r4, r3, [r5]
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	b902      	cbnz	r2, 8000dc2 <__udivmoddi4+0xaa>
 8000dc0:	deff      	udf	#255	; 0xff
 8000dc2:	fab2 f282 	clz	r2, r2
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	d150      	bne.n	8000e6c <__udivmoddi4+0x154>
 8000dca:	1bcb      	subs	r3, r1, r7
 8000dcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd0:	fa1f f887 	uxth.w	r8, r7
 8000dd4:	2601      	movs	r6, #1
 8000dd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dda:	0c21      	lsrs	r1, r4, #16
 8000ddc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb08 f30c 	mul.w	r3, r8, ip
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0xe4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0xe2>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	f200 80e9 	bhi.w	8000fcc <__udivmoddi4+0x2b4>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1ac9      	subs	r1, r1, r3
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x10c>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x10a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80d9 	bhi.w	8000fd4 <__udivmoddi4+0x2bc>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e7bf      	b.n	8000dae <__udivmoddi4+0x96>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0x12e>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80b1 	beq.w	8000f9a <__udivmoddi4+0x282>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x1cc>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0x140>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80b8 	bhi.w	8000fc8 <__udivmoddi4+0x2b0>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	468c      	mov	ip, r1
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0a8      	beq.n	8000db8 <__udivmoddi4+0xa0>
 8000e66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e6a:	e7a5      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f603 	lsr.w	r6, r0, r3
 8000e74:	4097      	lsls	r7, r2
 8000e76:	fa01 f002 	lsl.w	r0, r1, r2
 8000e7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e7e:	40d9      	lsrs	r1, r3
 8000e80:	4330      	orrs	r0, r6
 8000e82:	0c03      	lsrs	r3, r0, #16
 8000e84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e88:	fa1f f887 	uxth.w	r8, r7
 8000e8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e94:	fb06 f108 	mul.w	r1, r6, r8
 8000e98:	4299      	cmp	r1, r3
 8000e9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9e:	d909      	bls.n	8000eb4 <__udivmoddi4+0x19c>
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ea6:	f080 808d 	bcs.w	8000fc4 <__udivmoddi4+0x2ac>
 8000eaa:	4299      	cmp	r1, r3
 8000eac:	f240 808a 	bls.w	8000fc4 <__udivmoddi4+0x2ac>
 8000eb0:	3e02      	subs	r6, #2
 8000eb2:	443b      	add	r3, r7
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b281      	uxth	r1, r0
 8000eb8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ebc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ec0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec4:	fb00 f308 	mul.w	r3, r0, r8
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d907      	bls.n	8000edc <__udivmoddi4+0x1c4>
 8000ecc:	1879      	adds	r1, r7, r1
 8000ece:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ed2:	d273      	bcs.n	8000fbc <__udivmoddi4+0x2a4>
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d971      	bls.n	8000fbc <__udivmoddi4+0x2a4>
 8000ed8:	3802      	subs	r0, #2
 8000eda:	4439      	add	r1, r7
 8000edc:	1acb      	subs	r3, r1, r3
 8000ede:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ee2:	e778      	b.n	8000dd6 <__udivmoddi4+0xbe>
 8000ee4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ee8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ef0:	431c      	orrs	r4, r3
 8000ef2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000efe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f02:	431f      	orrs	r7, r3
 8000f04:	0c3b      	lsrs	r3, r7, #16
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fa1f f884 	uxth.w	r8, r4
 8000f0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f16:	fb09 fa08 	mul.w	sl, r9, r8
 8000f1a:	458a      	cmp	sl, r1
 8000f1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f20:	fa00 f306 	lsl.w	r3, r0, r6
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x220>
 8000f26:	1861      	adds	r1, r4, r1
 8000f28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f2c:	d248      	bcs.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f2e:	458a      	cmp	sl, r1
 8000f30:	d946      	bls.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f32:	f1a9 0902 	sub.w	r9, r9, #2
 8000f36:	4421      	add	r1, r4
 8000f38:	eba1 010a 	sub.w	r1, r1, sl
 8000f3c:	b2bf      	uxth	r7, r7
 8000f3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f4a:	fb00 f808 	mul.w	r8, r0, r8
 8000f4e:	45b8      	cmp	r8, r7
 8000f50:	d907      	bls.n	8000f62 <__udivmoddi4+0x24a>
 8000f52:	19e7      	adds	r7, r4, r7
 8000f54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f58:	d22e      	bcs.n	8000fb8 <__udivmoddi4+0x2a0>
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d92c      	bls.n	8000fb8 <__udivmoddi4+0x2a0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	4427      	add	r7, r4
 8000f62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f66:	eba7 0708 	sub.w	r7, r7, r8
 8000f6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f6e:	454f      	cmp	r7, r9
 8000f70:	46c6      	mov	lr, r8
 8000f72:	4649      	mov	r1, r9
 8000f74:	d31a      	bcc.n	8000fac <__udivmoddi4+0x294>
 8000f76:	d017      	beq.n	8000fa8 <__udivmoddi4+0x290>
 8000f78:	b15d      	cbz	r5, 8000f92 <__udivmoddi4+0x27a>
 8000f7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f86:	40f2      	lsrs	r2, r6
 8000f88:	ea4c 0202 	orr.w	r2, ip, r2
 8000f8c:	40f7      	lsrs	r7, r6
 8000f8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f92:	2600      	movs	r6, #0
 8000f94:	4631      	mov	r1, r6
 8000f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9a:	462e      	mov	r6, r5
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	e70b      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0x60>
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	e6fd      	b.n	8000da4 <__udivmoddi4+0x8c>
 8000fa8:	4543      	cmp	r3, r8
 8000faa:	d2e5      	bcs.n	8000f78 <__udivmoddi4+0x260>
 8000fac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	e7df      	b.n	8000f78 <__udivmoddi4+0x260>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e7d2      	b.n	8000f62 <__udivmoddi4+0x24a>
 8000fbc:	4660      	mov	r0, ip
 8000fbe:	e78d      	b.n	8000edc <__udivmoddi4+0x1c4>
 8000fc0:	4681      	mov	r9, r0
 8000fc2:	e7b9      	b.n	8000f38 <__udivmoddi4+0x220>
 8000fc4:	4666      	mov	r6, ip
 8000fc6:	e775      	b.n	8000eb4 <__udivmoddi4+0x19c>
 8000fc8:	4630      	mov	r0, r6
 8000fca:	e74a      	b.n	8000e62 <__udivmoddi4+0x14a>
 8000fcc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd0:	4439      	add	r1, r7
 8000fd2:	e713      	b.n	8000dfc <__udivmoddi4+0xe4>
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	443c      	add	r4, r7
 8000fd8:	e724      	b.n	8000e24 <__udivmoddi4+0x10c>
 8000fda:	bf00      	nop

08000fdc <__aeabi_idiv0>:
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe6:	f000 fc8b 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fea:	f000 fa11 	bl	8001410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fee:	f000 faa3 	bl	8001538 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ff2:	f000 fa77 	bl	80014e4 <MX_USART2_UART_Init>
		/*Method 1 Polling Mode*/

//		UARTRecieveAndResponsePolling();

		/*Method 2 Interrupt Mode*/
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	49af      	ldr	r1, [pc, #700]	; (80012b8 <main+0x2d8>)
 8000ffa:	48b0      	ldr	r0, [pc, #704]	; (80012bc <main+0x2dc>)
 8000ffc:	f001 fdb9 	bl	8002b72 <HAL_UART_Receive_IT>

		/*Method 2 W/ 1 Char Received*/
		int16_t inputchar = UARTRecieveIT();
 8001000:	f000 fb0a 	bl	8001618 <UARTRecieveIT>
 8001004:	4603      	mov	r3, r0
 8001006:	80fb      	strh	r3, [r7, #6]
		if(inputchar!=-1)
 8001008:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001010:	d011      	beq.n	8001036 <main+0x56>
		{

			sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n", inputchar);
 8001012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001016:	461a      	mov	r2, r3
 8001018:	49a9      	ldr	r1, [pc, #676]	; (80012c0 <main+0x2e0>)
 800101a:	48aa      	ldr	r0, [pc, #680]	; (80012c4 <main+0x2e4>)
 800101c:	f002 fb64 	bl	80036e8 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001020:	48a8      	ldr	r0, [pc, #672]	; (80012c4 <main+0x2e4>)
 8001022:	f7ff f8dd 	bl	80001e0 <strlen>
 8001026:	4603      	mov	r3, r0
 8001028:	b29a      	uxth	r2, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	49a5      	ldr	r1, [pc, #660]	; (80012c4 <main+0x2e4>)
 8001030:	48a2      	ldr	r0, [pc, #648]	; (80012bc <main+0x2dc>)
 8001032:	f001 fd0c 	bl	8002a4e <HAL_UART_Transmit>
		}
		Button[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103a:	48a3      	ldr	r0, [pc, #652]	; (80012c8 <main+0x2e8>)
 800103c:	f000 fffa 	bl	8002034 <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	4ba1      	ldr	r3, [pc, #644]	; (80012cc <main+0x2ec>)
 8001046:	701a      	strb	r2, [r3, #0]

				switch(state)
 8001048:	4ba1      	ldr	r3, [pc, #644]	; (80012d0 <main+0x2f0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b05      	cmp	r3, #5
 800104e:	f200 818d 	bhi.w	800136c <main+0x38c>
 8001052:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <main+0x78>)
 8001054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001058:	08001071 	.word	0x08001071
 800105c:	080010a1 	.word	0x080010a1
 8001060:	080010e7 	.word	0x080010e7
 8001064:	08001103 	.word	0x08001103
 8001068:	0800111f 	.word	0x0800111f
 800106c:	08001283 	.word	0x08001283
				{
					case 0:
					{
						HAL_UART_Transmit(&huart2, (uint8_t*)temp1, strlen(temp1),10);
 8001070:	4898      	ldr	r0, [pc, #608]	; (80012d4 <main+0x2f4>)
 8001072:	f7ff f8b5 	bl	80001e0 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29a      	uxth	r2, r3
 800107a:	230a      	movs	r3, #10
 800107c:	4995      	ldr	r1, [pc, #596]	; (80012d4 <main+0x2f4>)
 800107e:	488f      	ldr	r0, [pc, #572]	; (80012bc <main+0x2dc>)
 8001080:	f001 fce5 	bl	8002a4e <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*)temp2, strlen(temp2),10);
 8001084:	4894      	ldr	r0, [pc, #592]	; (80012d8 <main+0x2f8>)
 8001086:	f7ff f8ab 	bl	80001e0 <strlen>
 800108a:	4603      	mov	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	230a      	movs	r3, #10
 8001090:	4991      	ldr	r1, [pc, #580]	; (80012d8 <main+0x2f8>)
 8001092:	488a      	ldr	r0, [pc, #552]	; (80012bc <main+0x2dc>)
 8001094:	f001 fcdb 	bl	8002a4e <HAL_UART_Transmit>
						state = 1;
 8001098:	4b8d      	ldr	r3, [pc, #564]	; (80012d0 <main+0x2f0>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]
						break;
 800109e:	e165      	b.n	800136c <main+0x38c>
					}
					case 1:
						if(inputchar == '0')
 80010a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a4:	2b30      	cmp	r3, #48	; 0x30
 80010a6:	d103      	bne.n	80010b0 <main+0xd0>
						{
							state = 2;
 80010a8:	4b89      	ldr	r3, [pc, #548]	; (80012d0 <main+0x2f0>)
 80010aa:	2202      	movs	r2, #2
 80010ac:	601a      	str	r2, [r3, #0]
						}
//						else
//						{
//							state = 1;
//						}
						break;
 80010ae:	e15a      	b.n	8001366 <main+0x386>
						else if(inputchar == '1')
 80010b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b4:	2b31      	cmp	r3, #49	; 0x31
 80010b6:	d103      	bne.n	80010c0 <main+0xe0>
							state = 3;
 80010b8:	4b85      	ldr	r3, [pc, #532]	; (80012d0 <main+0x2f0>)
 80010ba:	2203      	movs	r2, #3
 80010bc:	601a      	str	r2, [r3, #0]
						break;
 80010be:	e152      	b.n	8001366 <main+0x386>
						else if(inputchar > 0)
 80010c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f340 814e 	ble.w	8001366 <main+0x386>
							HAL_UART_Transmit(&huart2, (uint8_t*)temp7, strlen(temp7),10);
 80010ca:	4884      	ldr	r0, [pc, #528]	; (80012dc <main+0x2fc>)
 80010cc:	f7ff f888 	bl	80001e0 <strlen>
 80010d0:	4603      	mov	r3, r0
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	230a      	movs	r3, #10
 80010d6:	4981      	ldr	r1, [pc, #516]	; (80012dc <main+0x2fc>)
 80010d8:	4878      	ldr	r0, [pc, #480]	; (80012bc <main+0x2dc>)
 80010da:	f001 fcb8 	bl	8002a4e <HAL_UART_Transmit>
							state = 1;
 80010de:	4b7c      	ldr	r3, [pc, #496]	; (80012d0 <main+0x2f0>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
						break;
 80010e4:	e13f      	b.n	8001366 <main+0x386>
					case 2:
					{
						HAL_UART_Transmit(&huart2, (uint8_t*)temp22, strlen(temp22),10);
 80010e6:	487e      	ldr	r0, [pc, #504]	; (80012e0 <main+0x300>)
 80010e8:	f7ff f87a 	bl	80001e0 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	230a      	movs	r3, #10
 80010f2:	497b      	ldr	r1, [pc, #492]	; (80012e0 <main+0x300>)
 80010f4:	4871      	ldr	r0, [pc, #452]	; (80012bc <main+0x2dc>)
 80010f6:	f001 fcaa 	bl	8002a4e <HAL_UART_Transmit>
						state = 4;
 80010fa:	4b75      	ldr	r3, [pc, #468]	; (80012d0 <main+0x2f0>)
 80010fc:	2204      	movs	r2, #4
 80010fe:	601a      	str	r2, [r3, #0]
						break;
 8001100:	e134      	b.n	800136c <main+0x38c>
					}
					case 3:
					{

						HAL_UART_Transmit(&huart2, (uint8_t*)temp21, strlen(temp21),10);
 8001102:	4878      	ldr	r0, [pc, #480]	; (80012e4 <main+0x304>)
 8001104:	f7ff f86c 	bl	80001e0 <strlen>
 8001108:	4603      	mov	r3, r0
 800110a:	b29a      	uxth	r2, r3
 800110c:	230a      	movs	r3, #10
 800110e:	4975      	ldr	r1, [pc, #468]	; (80012e4 <main+0x304>)
 8001110:	486a      	ldr	r0, [pc, #424]	; (80012bc <main+0x2dc>)
 8001112:	f001 fc9c 	bl	8002a4e <HAL_UART_Transmit>
						state = 5;
 8001116:	4b6e      	ldr	r3, [pc, #440]	; (80012d0 <main+0x2f0>)
 8001118:	2205      	movs	r2, #5
 800111a:	601a      	str	r2, [r3, #0]
						break;
 800111c:	e126      	b.n	800136c <main+0x38c>
					}
					case 4:
					{
						if(inputchar == 'a')
 800111e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001122:	2b61      	cmp	r3, #97	; 0x61
 8001124:	d135      	bne.n	8001192 <main+0x1b2>
						{
							f =f+1;
 8001126:	4b70      	ldr	r3, [pc, #448]	; (80012e8 <main+0x308>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	4a6e      	ldr	r2, [pc, #440]	; (80012e8 <main+0x308>)
 800112e:	6013      	str	r3, [r2, #0]
							sprintf(temp,"Frequency: %d Hz\r\n",f);
 8001130:	4b6d      	ldr	r3, [pc, #436]	; (80012e8 <main+0x308>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	496d      	ldr	r1, [pc, #436]	; (80012ec <main+0x30c>)
 8001138:	486d      	ldr	r0, [pc, #436]	; (80012f0 <main+0x310>)
 800113a:	f002 fad5 	bl	80036e8 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 10);
 800113e:	486c      	ldr	r0, [pc, #432]	; (80012f0 <main+0x310>)
 8001140:	f7ff f84e 	bl	80001e0 <strlen>
 8001144:	4603      	mov	r3, r0
 8001146:	b29a      	uxth	r2, r3
 8001148:	230a      	movs	r3, #10
 800114a:	4969      	ldr	r1, [pc, #420]	; (80012f0 <main+0x310>)
 800114c:	485b      	ldr	r0, [pc, #364]	; (80012bc <main+0x2dc>)
 800114e:	f001 fc7e 	bl	8002a4e <HAL_UART_Transmit>
							period = 1.0/f;
 8001152:	4b65      	ldr	r3, [pc, #404]	; (80012e8 <main+0x308>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9ec 	bl	8000534 <__aeabi_i2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	f04f 0000 	mov.w	r0, #0
 8001164:	4963      	ldr	r1, [pc, #396]	; (80012f4 <main+0x314>)
 8001166:	f7ff fb79 	bl	800085c <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fc5b 	bl	8000a2c <__aeabi_d2f>
 8001176:	4603      	mov	r3, r0
 8001178:	4a5f      	ldr	r2, [pc, #380]	; (80012f8 <main+0x318>)
 800117a:	6013      	str	r3, [r2, #0]
							halfperiod = period*500;
 800117c:	4b5e      	ldr	r3, [pc, #376]	; (80012f8 <main+0x318>)
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80012fc <main+0x31c>
 8001186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118a:	4b5d      	ldr	r3, [pc, #372]	; (8001300 <main+0x320>)
 800118c:	edc3 7a00 	vstr	s15, [r3]
						else if(inputchar > 0)
						{
							HAL_UART_Transmit(&huart2, (uint8_t*)temp7, strlen(temp7),10);
							state = 4;
						}
						break;
 8001190:	e0eb      	b.n	800136a <main+0x38a>
						else if(inputchar == 's')
 8001192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001196:	2b73      	cmp	r3, #115	; 0x73
 8001198:	d13c      	bne.n	8001214 <main+0x234>
							f =f-1;
 800119a:	4b53      	ldr	r3, [pc, #332]	; (80012e8 <main+0x308>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3b01      	subs	r3, #1
 80011a0:	4a51      	ldr	r2, [pc, #324]	; (80012e8 <main+0x308>)
 80011a2:	6013      	str	r3, [r2, #0]
							period = 1.0/f;
 80011a4:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <main+0x308>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f9c3 	bl	8000534 <__aeabi_i2d>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	494f      	ldr	r1, [pc, #316]	; (80012f4 <main+0x314>)
 80011b8:	f7ff fb50 	bl	800085c <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fc32 	bl	8000a2c <__aeabi_d2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a4b      	ldr	r2, [pc, #300]	; (80012f8 <main+0x318>)
 80011cc:	6013      	str	r3, [r2, #0]
							halfperiod = period*500;
 80011ce:	4b4a      	ldr	r3, [pc, #296]	; (80012f8 <main+0x318>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80012fc <main+0x31c>
 80011d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011dc:	4b48      	ldr	r3, [pc, #288]	; (8001300 <main+0x320>)
 80011de:	edc3 7a00 	vstr	s15, [r3]
							if(f< 0 )
 80011e2:	4b41      	ldr	r3, [pc, #260]	; (80012e8 <main+0x308>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da02      	bge.n	80011f0 <main+0x210>
								f=0;
 80011ea:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <main+0x308>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
							sprintf(temp,"Frequency: %d Hz\r\n",f);
 80011f0:	4b3d      	ldr	r3, [pc, #244]	; (80012e8 <main+0x308>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	493d      	ldr	r1, [pc, #244]	; (80012ec <main+0x30c>)
 80011f8:	483d      	ldr	r0, [pc, #244]	; (80012f0 <main+0x310>)
 80011fa:	f002 fa75 	bl	80036e8 <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 10);
 80011fe:	483c      	ldr	r0, [pc, #240]	; (80012f0 <main+0x310>)
 8001200:	f7fe ffee 	bl	80001e0 <strlen>
 8001204:	4603      	mov	r3, r0
 8001206:	b29a      	uxth	r2, r3
 8001208:	230a      	movs	r3, #10
 800120a:	4939      	ldr	r1, [pc, #228]	; (80012f0 <main+0x310>)
 800120c:	482b      	ldr	r0, [pc, #172]	; (80012bc <main+0x2dc>)
 800120e:	f001 fc1e 	bl	8002a4e <HAL_UART_Transmit>
						break;
 8001212:	e0aa      	b.n	800136a <main+0x38a>
						else if(inputchar == 'd')
 8001214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001218:	2b64      	cmp	r3, #100	; 0x64
 800121a:	d117      	bne.n	800124c <main+0x26c>
							count+=1;
 800121c:	4b39      	ldr	r3, [pc, #228]	; (8001304 <main+0x324>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	4a38      	ldr	r2, [pc, #224]	; (8001304 <main+0x324>)
 8001224:	6013      	str	r3, [r2, #0]
							if(count %2==1)
 8001226:	4b37      	ldr	r3, [pc, #220]	; (8001304 <main+0x324>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	bfb8      	it	lt
 8001232:	425b      	neglt	r3, r3
 8001234:	2b01      	cmp	r3, #1
 8001236:	f040 8098 	bne.w	800136a <main+0x38a>
								HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2120      	movs	r1, #32
 800123e:	4832      	ldr	r0, [pc, #200]	; (8001308 <main+0x328>)
 8001240:	f000 ff10 	bl	8002064 <HAL_GPIO_WritePin>
								a=0;
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <main+0x32c>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
						break;
 800124a:	e08e      	b.n	800136a <main+0x38a>
						else if(inputchar == 'x')
 800124c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001250:	2b78      	cmp	r3, #120	; 0x78
 8001252:	d103      	bne.n	800125c <main+0x27c>
							state = 0;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <main+0x2f0>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
						break;
 800125a:	e086      	b.n	800136a <main+0x38a>
						else if(inputchar > 0)
 800125c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001260:	2b00      	cmp	r3, #0
 8001262:	f340 8082 	ble.w	800136a <main+0x38a>
							HAL_UART_Transmit(&huart2, (uint8_t*)temp7, strlen(temp7),10);
 8001266:	481d      	ldr	r0, [pc, #116]	; (80012dc <main+0x2fc>)
 8001268:	f7fe ffba 	bl	80001e0 <strlen>
 800126c:	4603      	mov	r3, r0
 800126e:	b29a      	uxth	r2, r3
 8001270:	230a      	movs	r3, #10
 8001272:	491a      	ldr	r1, [pc, #104]	; (80012dc <main+0x2fc>)
 8001274:	4811      	ldr	r0, [pc, #68]	; (80012bc <main+0x2dc>)
 8001276:	f001 fbea 	bl	8002a4e <HAL_UART_Transmit>
							state = 4;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <main+0x2f0>)
 800127c:	2204      	movs	r2, #4
 800127e:	601a      	str	r2, [r3, #0]
						break;
 8001280:	e073      	b.n	800136a <main+0x38a>
					}
					case 5:
					{
						if(inputchar == 'x')
 8001282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001286:	2b78      	cmp	r3, #120	; 0x78
 8001288:	d103      	bne.n	8001292 <main+0x2b2>
						{
							state = 0;
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <main+0x2f0>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	e064      	b.n	800135c <main+0x37c>
						}
						else if(Button[1] == 1 && Button[0] == 0)
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <main+0x2ec>)
 8001294:	785b      	ldrb	r3, [r3, #1]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d13c      	bne.n	8001314 <main+0x334>
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <main+0x2ec>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d138      	bne.n	8001314 <main+0x334>
						{
							HAL_UART_Transmit(&huart2, (uint8_t*)temp215, strlen(temp215),10);
 80012a2:	481b      	ldr	r0, [pc, #108]	; (8001310 <main+0x330>)
 80012a4:	f7fe ff9c 	bl	80001e0 <strlen>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	230a      	movs	r3, #10
 80012ae:	4918      	ldr	r1, [pc, #96]	; (8001310 <main+0x330>)
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <main+0x2dc>)
 80012b2:	f001 fbcc 	bl	8002a4e <HAL_UART_Transmit>
 80012b6:	e051      	b.n	800135c <main+0x37c>
 80012b8:	200001a4 	.word	0x200001a4
 80012bc:	20000210 	.word	0x20000210
 80012c0:	08003f5c 	.word	0x08003f5c
 80012c4:	20000184 	.word	0x20000184
 80012c8:	40020800 	.word	0x40020800
 80012cc:	20000208 	.word	0x20000208
 80012d0:	200001c4 	.word	0x200001c4
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000024 	.word	0x20000024
 80012dc:	200000ec 	.word	0x200000ec
 80012e0:	20000040 	.word	0x20000040
 80012e4:	2000009c 	.word	0x2000009c
 80012e8:	20000000 	.word	0x20000000
 80012ec:	08003f70 	.word	0x08003f70
 80012f0:	200001cc 	.word	0x200001cc
 80012f4:	3ff00000 	.word	0x3ff00000
 80012f8:	2000020c 	.word	0x2000020c
 80012fc:	43fa0000 	.word	0x43fa0000
 8001300:	20000254 	.word	0x20000254
 8001304:	20000004 	.word	0x20000004
 8001308:	40020000 	.word	0x40020000
 800130c:	200001c8 	.word	0x200001c8
 8001310:	200000d4 	.word	0x200000d4
						}
						else if(Button[1] == 0 && Button[0] == 1)
 8001314:	4b34      	ldr	r3, [pc, #208]	; (80013e8 <main+0x408>)
 8001316:	785b      	ldrb	r3, [r3, #1]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10e      	bne.n	800133a <main+0x35a>
 800131c:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <main+0x408>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d10a      	bne.n	800133a <main+0x35a>
						{
							HAL_UART_Transmit(&huart2, (uint8_t*)temp216, strlen(temp216),10);
 8001324:	4831      	ldr	r0, [pc, #196]	; (80013ec <main+0x40c>)
 8001326:	f7fe ff5b 	bl	80001e0 <strlen>
 800132a:	4603      	mov	r3, r0
 800132c:	b29a      	uxth	r2, r3
 800132e:	230a      	movs	r3, #10
 8001330:	492e      	ldr	r1, [pc, #184]	; (80013ec <main+0x40c>)
 8001332:	482f      	ldr	r0, [pc, #188]	; (80013f0 <main+0x410>)
 8001334:	f001 fb8b 	bl	8002a4e <HAL_UART_Transmit>
 8001338:	e010      	b.n	800135c <main+0x37c>
						}
						else if(inputchar > 0)
 800133a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133e:	2b00      	cmp	r3, #0
 8001340:	dd0c      	ble.n	800135c <main+0x37c>
						{
							HAL_UART_Transmit(&huart2, (uint8_t*)temp7, strlen(temp7),10);
 8001342:	482c      	ldr	r0, [pc, #176]	; (80013f4 <main+0x414>)
 8001344:	f7fe ff4c 	bl	80001e0 <strlen>
 8001348:	4603      	mov	r3, r0
 800134a:	b29a      	uxth	r2, r3
 800134c:	230a      	movs	r3, #10
 800134e:	4929      	ldr	r1, [pc, #164]	; (80013f4 <main+0x414>)
 8001350:	4827      	ldr	r0, [pc, #156]	; (80013f0 <main+0x410>)
 8001352:	f001 fb7c 	bl	8002a4e <HAL_UART_Transmit>
							state = 5;
 8001356:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <main+0x418>)
 8001358:	2205      	movs	r2, #5
 800135a:	601a      	str	r2, [r3, #0]
						}
						Button[1] = Button[0];
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <main+0x408>)
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <main+0x408>)
 8001362:	705a      	strb	r2, [r3, #1]
 8001364:	e002      	b.n	800136c <main+0x38c>
						break;
 8001366:	bf00      	nop
 8001368:	e000      	b.n	800136c <main+0x38c>
						break;
 800136a:	bf00      	nop
					}

				}
				if(count%2==0)
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <main+0x41c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	f47f ae3e 	bne.w	8000ff6 <main+0x16>
				{
					if(f==0)
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <main+0x420>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d104      	bne.n	800138c <main+0x3ac>
					{
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001382:	2201      	movs	r2, #1
 8001384:	2120      	movs	r1, #32
 8001386:	481f      	ldr	r0, [pc, #124]	; (8001404 <main+0x424>)
 8001388:	f000 fe6c 	bl	8002064 <HAL_GPIO_WritePin>
					}
					if(f>0)
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <main+0x420>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	f77f ae30 	ble.w	8000ff6 <main+0x16>
					{
						if(HAL_GetTick()-TimeStamp >= halfperiod )
 8001396:	f000 fb19 	bl	80019cc <HAL_GetTick>
 800139a:	4603      	mov	r3, r0
 800139c:	4618      	mov	r0, r3
 800139e:	f04f 0100 	mov.w	r1, #0
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <main+0x428>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	1a84      	subs	r4, r0, r2
 80013aa:	eb61 0503 	sbc.w	r5, r1, r3
 80013ae:	4620      	mov	r0, r4
 80013b0:	4629      	mov	r1, r5
 80013b2:	f7ff fc53 	bl	8000c5c <__aeabi_ul2f>
 80013b6:	ee07 0a10 	vmov	s14, r0
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <main+0x42c>)
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	db0c      	blt.n	80013e4 <main+0x404>
						{
							TimeStamp = HAL_GetTick();
 80013ca:	f000 faff 	bl	80019cc <HAL_GetTick>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	490c      	ldr	r1, [pc, #48]	; (8001408 <main+0x428>)
 80013d8:	e9c1 2300 	strd	r2, r3, [r1]
							HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80013dc:	2120      	movs	r1, #32
 80013de:	4809      	ldr	r0, [pc, #36]	; (8001404 <main+0x424>)
 80013e0:	f000 fe59 	bl	8002096 <HAL_GPIO_TogglePin>
	{
 80013e4:	e607      	b.n	8000ff6 <main+0x16>
 80013e6:	bf00      	nop
 80013e8:	20000208 	.word	0x20000208
 80013ec:	200000e0 	.word	0x200000e0
 80013f0:	20000210 	.word	0x20000210
 80013f4:	200000ec 	.word	0x200000ec
 80013f8:	200001c4 	.word	0x200001c4
 80013fc:	20000004 	.word	0x20000004
 8001400:	20000000 	.word	0x20000000
 8001404:	40020000 	.word	0x40020000
 8001408:	20000200 	.word	0x20000200
 800140c:	20000254 	.word	0x20000254

08001410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b094      	sub	sp, #80	; 0x50
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 0320 	add.w	r3, r7, #32
 800141a:	2230      	movs	r2, #48	; 0x30
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f002 f95a 	bl	80036d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	4b28      	ldr	r3, [pc, #160]	; (80014dc <SystemClock_Config+0xcc>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	4a27      	ldr	r2, [pc, #156]	; (80014dc <SystemClock_Config+0xcc>)
 800143e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001442:	6413      	str	r3, [r2, #64]	; 0x40
 8001444:	4b25      	ldr	r3, [pc, #148]	; (80014dc <SystemClock_Config+0xcc>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <SystemClock_Config+0xd0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <SystemClock_Config+0xd0>)
 800145a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <SystemClock_Config+0xd0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800146c:	2302      	movs	r3, #2
 800146e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001470:	2301      	movs	r3, #1
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001474:	2310      	movs	r3, #16
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001478:	2302      	movs	r3, #2
 800147a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800147c:	2300      	movs	r3, #0
 800147e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001480:	2310      	movs	r3, #16
 8001482:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001484:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001488:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800148a:	2304      	movs	r3, #4
 800148c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800148e:	2304      	movs	r3, #4
 8001490:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fe18 	bl	80020cc <HAL_RCC_OscConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014a2:	f000 f909 	bl	80016b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a6:	230f      	movs	r3, #15
 80014a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014aa:	2302      	movs	r3, #2
 80014ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2102      	movs	r1, #2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f001 f87a 	bl	80025bc <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014ce:	f000 f8f3 	bl	80016b8 <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3750      	adds	r7, #80	; 0x50
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40007000 	.word	0x40007000

080014e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <MX_USART2_UART_Init+0x50>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 80014f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_USART2_UART_Init+0x4c>)
 800151c:	f001 fa4a 	bl	80029b4 <HAL_UART_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001526:	f000 f8c7 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000210 	.word	0x20000210
 8001534:	40004400 	.word	0x40004400

08001538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <MX_GPIO_Init+0xd0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a2c      	ldr	r2, [pc, #176]	; (8001608 <MX_GPIO_Init+0xd0>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <MX_GPIO_Init+0xd0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <MX_GPIO_Init+0xd0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a25      	ldr	r2, [pc, #148]	; (8001608 <MX_GPIO_Init+0xd0>)
 8001574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b23      	ldr	r3, [pc, #140]	; (8001608 <MX_GPIO_Init+0xd0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <MX_GPIO_Init+0xd0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a1e      	ldr	r2, [pc, #120]	; (8001608 <MX_GPIO_Init+0xd0>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <MX_GPIO_Init+0xd0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MX_GPIO_Init+0xd0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a17      	ldr	r2, [pc, #92]	; (8001608 <MX_GPIO_Init+0xd0>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <MX_GPIO_Init+0xd0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2120      	movs	r1, #32
 80015c2:	4812      	ldr	r0, [pc, #72]	; (800160c <MX_GPIO_Init+0xd4>)
 80015c4:	f000 fd4e 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <MX_GPIO_Init+0xd8>)
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_GPIO_Init+0xdc>)
 80015de:	f000 fba5 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015e2:	2320      	movs	r3, #32
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4804      	ldr	r0, [pc, #16]	; (800160c <MX_GPIO_Init+0xd4>)
 80015fa:	f000 fb97 	bl	8001d2c <HAL_GPIO_Init>

}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40020000 	.word	0x40020000
 8001610:	10210000 	.word	0x10210000
 8001614:	40020800 	.word	0x40020800

08001618 <UARTRecieveIT>:

}


int16_t UARTRecieveIT()
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 800161e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001622:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <UARTRecieveIT+0x54>)
 8001626:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001628:	461a      	mov	r2, r3
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <UARTRecieveIT+0x54>)
 800162c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800162e:	b29b      	uxth	r3, r3
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <UARTRecieveIT+0x58>)
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	4293      	cmp	r3, r2
 8001638:	d010      	beq.n	800165c <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <UARTRecieveIT+0x58>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <UARTRecieveIT+0x5c>)
 8001640:	5cd3      	ldrb	r3, [r2, r3]
 8001642:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <UARTRecieveIT+0x58>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <UARTRecieveIT+0x54>)
 800164c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800164e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001652:	fb02 f201 	mul.w	r2, r2, r1
 8001656:	1a9b      	subs	r3, r3, r2
 8001658:	4a05      	ldr	r2, [pc, #20]	; (8001670 <UARTRecieveIT+0x58>)
 800165a:	6013      	str	r3, [r2, #0]
	}
	return data;
 800165c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	20000210 	.word	0x20000210
 8001670:	200001ec 	.word	0x200001ec
 8001674:	200001a4 	.word	0x200001a4

08001678 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
 8001680:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <HAL_UART_RxCpltCallback+0x30>)
 8001682:	490a      	ldr	r1, [pc, #40]	; (80016ac <HAL_UART_RxCpltCallback+0x34>)
 8001684:	480a      	ldr	r0, [pc, #40]	; (80016b0 <HAL_UART_RxCpltCallback+0x38>)
 8001686:	f002 f82f 	bl	80036e8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800168a:	4809      	ldr	r0, [pc, #36]	; (80016b0 <HAL_UART_RxCpltCallback+0x38>)
 800168c:	f7fe fda8 	bl	80001e0 <strlen>
 8001690:	4603      	mov	r3, r0
 8001692:	b29a      	uxth	r2, r3
 8001694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001698:	4905      	ldr	r1, [pc, #20]	; (80016b0 <HAL_UART_RxCpltCallback+0x38>)
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <HAL_UART_RxCpltCallback+0x3c>)
 800169c:	f001 f9d7 	bl	8002a4e <HAL_UART_Transmit>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200001a4 	.word	0x200001a4
 80016ac:	08003f84 	.word	0x08003f84
 80016b0:	20000184 	.word	0x20000184
 80016b4:	20000210 	.word	0x20000210

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016c0:	e7fe      	b.n	80016c0 <Error_Handler+0x8>
	...

080016c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <HAL_MspInit+0x4c>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x4c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001702:	2007      	movs	r0, #7
 8001704:	f000 fa3e 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <HAL_UART_MspInit+0x94>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d133      	bne.n	800179e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_UART_MspInit+0x98>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <HAL_UART_MspInit+0x98>)
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_UART_MspInit+0x98>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_UART_MspInit+0x98>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a14      	ldr	r2, [pc, #80]	; (80017ac <HAL_UART_MspInit+0x98>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_UART_MspInit+0x98>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800176e:	230c      	movs	r3, #12
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800177e:	2307      	movs	r3, #7
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4809      	ldr	r0, [pc, #36]	; (80017b0 <HAL_UART_MspInit+0x9c>)
 800178a:	f000 facf 	bl	8001d2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	2026      	movs	r0, #38	; 0x26
 8001794:	f000 fa01 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001798:	2026      	movs	r0, #38	; 0x26
 800179a:	f000 fa1a 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	; 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40004400 	.word	0x40004400
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020000 	.word	0x40020000

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001800:	f000 f8d0 	bl	80019a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}

08001808 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <USART2_IRQHandler+0x10>)
 800180e:	f001 f9e1 	bl	8002bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000210 	.word	0x20000210

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f001 ff1a 	bl	8003684 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20020000 	.word	0x20020000
 800187c:	00000400 	.word	0x00000400
 8001880:	200001f0 	.word	0x200001f0
 8001884:	20000270 	.word	0x20000270

08001888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <SystemInit+0x20>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <SystemInit+0x20>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b0:	480d      	ldr	r0, [pc, #52]	; (80018e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018b2:	490e      	ldr	r1, [pc, #56]	; (80018ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018b4:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b8:	e002      	b.n	80018c0 <LoopCopyDataInit>

080018ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018be:	3304      	adds	r3, #4

080018c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c4:	d3f9      	bcc.n	80018ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c6:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018c8:	4c0b      	ldr	r4, [pc, #44]	; (80018f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018cc:	e001      	b.n	80018d2 <LoopFillZerobss>

080018ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d0:	3204      	adds	r2, #4

080018d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d4:	d3fb      	bcc.n	80018ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018d6:	f7ff ffd7 	bl	8001888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018da:	f001 fed9 	bl	8003690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018de:	f7ff fb7f 	bl	8000fe0 <main>
  bx  lr    
 80018e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80018f0:	08003ff0 	.word	0x08003ff0
  ldr r2, =_sbss
 80018f4:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80018f8:	2000026c 	.word	0x2000026c

080018fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <HAL_Init+0x40>)
 800190a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_Init+0x40>)
 8001916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_Init+0x40>)
 8001922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 f92b 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	2000      	movs	r0, #0
 8001930:	f000 f808 	bl	8001944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff fec6 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023c00 	.word	0x40023c00

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_InitTick+0x54>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x58>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195a:	fbb3 f3f1 	udiv	r3, r3, r1
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f943 	bl	8001bee <HAL_SYSTICK_Config>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e00e      	b.n	8001990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d80a      	bhi.n	800198e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f000 f90b 	bl	8001b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_InitTick+0x5c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200000f4 	.word	0x200000f4
 800199c:	200000fc 	.word	0x200000fc
 80019a0:	200000f8 	.word	0x200000f8

080019a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x20>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_IncTick+0x24>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_IncTick+0x24>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200000fc 	.word	0x200000fc
 80019c8:	20000258 	.word	0x20000258

080019cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_GetTick+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000258 	.word	0x20000258

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4907      	ldr	r1, [pc, #28]	; (8001a80 <__NVIC_EnableIRQ+0x38>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00f      	b.n	8001b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <SysTick_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5e:	210f      	movs	r1, #15
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f7ff ff8e 	bl	8001a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <SysTick_Config+0x40>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SysTick_Config+0x40>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff29 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff3e 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff8e 	bl	8001ad8 <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5d 	bl	8001a84 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff31 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffa2 	bl	8001b40 <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff feda 	bl	80019cc <HAL_GetTick>
 8001c18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d008      	beq.n	8001c38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e052      	b.n	8001cde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0216 	bic.w	r2, r2, #22
 8001c46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d103      	bne.n	8001c68 <HAL_DMA_Abort+0x62>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0208 	bic.w	r2, r2, #8
 8001c76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0201 	bic.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c88:	e013      	b.n	8001cb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c8a:	f7ff fe9f 	bl	80019cc <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b05      	cmp	r3, #5
 8001c96:	d90c      	bls.n	8001cb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e015      	b.n	8001cde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e4      	bne.n	8001c8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	223f      	movs	r2, #63	; 0x3f
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d004      	beq.n	8001d04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2280      	movs	r2, #128	; 0x80
 8001cfe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e00c      	b.n	8001d1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2205      	movs	r2, #5
 8001d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0201 	bic.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	e159      	b.n	8001ffc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	f040 8148 	bne.w	8001ff6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d005      	beq.n	8001d7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d130      	bne.n	8001de0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	2203      	movs	r2, #3
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db4:	2201      	movs	r2, #1
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 0201 	and.w	r2, r3, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d017      	beq.n	8001e1c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d123      	bne.n	8001e70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	08da      	lsrs	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3208      	adds	r2, #8
 8001e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	220f      	movs	r2, #15
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	08da      	lsrs	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3208      	adds	r2, #8
 8001e6a:	69b9      	ldr	r1, [r7, #24]
 8001e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0203 	and.w	r2, r3, #3
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80a2 	beq.w	8001ff6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b57      	ldr	r3, [pc, #348]	; (8002014 <HAL_GPIO_Init+0x2e8>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4a56      	ldr	r2, [pc, #344]	; (8002014 <HAL_GPIO_Init+0x2e8>)
 8001ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	4b54      	ldr	r3, [pc, #336]	; (8002014 <HAL_GPIO_Init+0x2e8>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ece:	4a52      	ldr	r2, [pc, #328]	; (8002018 <HAL_GPIO_Init+0x2ec>)
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a49      	ldr	r2, [pc, #292]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d019      	beq.n	8001f2e <HAL_GPIO_Init+0x202>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a48      	ldr	r2, [pc, #288]	; (8002020 <HAL_GPIO_Init+0x2f4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <HAL_GPIO_Init+0x1fe>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a47      	ldr	r2, [pc, #284]	; (8002024 <HAL_GPIO_Init+0x2f8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00d      	beq.n	8001f26 <HAL_GPIO_Init+0x1fa>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a46      	ldr	r2, [pc, #280]	; (8002028 <HAL_GPIO_Init+0x2fc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d007      	beq.n	8001f22 <HAL_GPIO_Init+0x1f6>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a45      	ldr	r2, [pc, #276]	; (800202c <HAL_GPIO_Init+0x300>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d101      	bne.n	8001f1e <HAL_GPIO_Init+0x1f2>
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	e008      	b.n	8001f30 <HAL_GPIO_Init+0x204>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x204>
 8001f22:	2303      	movs	r3, #3
 8001f24:	e004      	b.n	8001f30 <HAL_GPIO_Init+0x204>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e002      	b.n	8001f30 <HAL_GPIO_Init+0x204>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_GPIO_Init+0x204>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	f002 0203 	and.w	r2, r2, #3
 8001f36:	0092      	lsls	r2, r2, #2
 8001f38:	4093      	lsls	r3, r2
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f40:	4935      	ldr	r1, [pc, #212]	; (8002018 <HAL_GPIO_Init+0x2ec>)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	089b      	lsrs	r3, r3, #2
 8001f46:	3302      	adds	r3, #2
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f4e:	4b38      	ldr	r3, [pc, #224]	; (8002030 <HAL_GPIO_Init+0x304>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f72:	4a2f      	ldr	r2, [pc, #188]	; (8002030 <HAL_GPIO_Init+0x304>)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f78:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_GPIO_Init+0x304>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f9c:	4a24      	ldr	r2, [pc, #144]	; (8002030 <HAL_GPIO_Init+0x304>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa2:	4b23      	ldr	r3, [pc, #140]	; (8002030 <HAL_GPIO_Init+0x304>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fc6:	4a1a      	ldr	r2, [pc, #104]	; (8002030 <HAL_GPIO_Init+0x304>)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fcc:	4b18      	ldr	r3, [pc, #96]	; (8002030 <HAL_GPIO_Init+0x304>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff0:	4a0f      	ldr	r2, [pc, #60]	; (8002030 <HAL_GPIO_Init+0x304>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	2b0f      	cmp	r3, #15
 8002000:	f67f aea2 	bls.w	8001d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800
 8002018:	40013800 	.word	0x40013800
 800201c:	40020000 	.word	0x40020000
 8002020:	40020400 	.word	0x40020400
 8002024:	40020800 	.word	0x40020800
 8002028:	40020c00 	.word	0x40020c00
 800202c:	40021000 	.word	0x40021000
 8002030:	40013c00 	.word	0x40013c00

08002034 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	e001      	b.n	8002056 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
 8002070:	4613      	mov	r3, r2
 8002072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002074:	787b      	ldrb	r3, [r7, #1]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207a:	887a      	ldrh	r2, [r7, #2]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002080:	e003      	b.n	800208a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	041a      	lsls	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	619a      	str	r2, [r3, #24]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002096:	b480      	push	{r7}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020a8:	887a      	ldrh	r2, [r7, #2]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	041a      	lsls	r2, r3, #16
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	400b      	ands	r3, r1
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	619a      	str	r2, [r3, #24]
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e264      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d075      	beq.n	80021d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ea:	4ba3      	ldr	r3, [pc, #652]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d00c      	beq.n	8002110 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020f6:	4ba0      	ldr	r3, [pc, #640]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d112      	bne.n	8002128 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002102:	4b9d      	ldr	r3, [pc, #628]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800210e:	d10b      	bne.n	8002128 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	4b99      	ldr	r3, [pc, #612]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d05b      	beq.n	80021d4 <HAL_RCC_OscConfig+0x108>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d157      	bne.n	80021d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e23f      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002130:	d106      	bne.n	8002140 <HAL_RCC_OscConfig+0x74>
 8002132:	4b91      	ldr	r3, [pc, #580]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a90      	ldr	r2, [pc, #576]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 8002138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e01d      	b.n	800217c <HAL_RCC_OscConfig+0xb0>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x98>
 800214a:	4b8b      	ldr	r3, [pc, #556]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a8a      	ldr	r2, [pc, #552]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b88      	ldr	r3, [pc, #544]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a87      	ldr	r2, [pc, #540]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0xb0>
 8002164:	4b84      	ldr	r3, [pc, #528]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a83      	ldr	r2, [pc, #524]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 800216a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b81      	ldr	r3, [pc, #516]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a80      	ldr	r2, [pc, #512]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 8002176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fc22 	bl	80019cc <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218c:	f7ff fc1e 	bl	80019cc <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e204      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b76      	ldr	r3, [pc, #472]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0xc0>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fc0e 	bl	80019cc <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff fc0a 	bl	80019cc <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e1f0      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c6:	4b6c      	ldr	r3, [pc, #432]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0xe8>
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d063      	beq.n	80022aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021e2:	4b65      	ldr	r3, [pc, #404]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ee:	4b62      	ldr	r3, [pc, #392]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d11c      	bne.n	8002234 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021fa:	4b5f      	ldr	r3, [pc, #380]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d116      	bne.n	8002234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002206:	4b5c      	ldr	r3, [pc, #368]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <HAL_RCC_OscConfig+0x152>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d001      	beq.n	800221e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e1c4      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221e:	4b56      	ldr	r3, [pc, #344]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4952      	ldr	r1, [pc, #328]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002232:	e03a      	b.n	80022aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d020      	beq.n	800227e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800223c:	4b4f      	ldr	r3, [pc, #316]	; (800237c <HAL_RCC_OscConfig+0x2b0>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7ff fbc3 	bl	80019cc <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800224a:	f7ff fbbf 	bl	80019cc <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e1a5      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	4b46      	ldr	r3, [pc, #280]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002268:	4b43      	ldr	r3, [pc, #268]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4940      	ldr	r1, [pc, #256]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
 800227c:	e015      	b.n	80022aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227e:	4b3f      	ldr	r3, [pc, #252]	; (800237c <HAL_RCC_OscConfig+0x2b0>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7ff fba2 	bl	80019cc <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800228c:	f7ff fb9e 	bl	80019cc <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e184      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229e:	4b36      	ldr	r3, [pc, #216]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d030      	beq.n	8002318 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d016      	beq.n	80022ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022be:	4b30      	ldr	r3, [pc, #192]	; (8002380 <HAL_RCC_OscConfig+0x2b4>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7ff fb82 	bl	80019cc <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022cc:	f7ff fb7e 	bl	80019cc <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e164      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	4b26      	ldr	r3, [pc, #152]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x200>
 80022ea:	e015      	b.n	8002318 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ec:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_RCC_OscConfig+0x2b4>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f2:	f7ff fb6b 	bl	80019cc <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022fa:	f7ff fb67 	bl	80019cc <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e14d      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230c:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 800230e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f0      	bne.n	80022fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80a0 	beq.w	8002466 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10f      	bne.n	8002356 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002352:	2301      	movs	r3, #1
 8002354:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCC_OscConfig+0x2b8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235e:	2b00      	cmp	r3, #0
 8002360:	d121      	bne.n	80023a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <HAL_RCC_OscConfig+0x2b8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a07      	ldr	r2, [pc, #28]	; (8002384 <HAL_RCC_OscConfig+0x2b8>)
 8002368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236e:	f7ff fb2d 	bl	80019cc <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002374:	e011      	b.n	800239a <HAL_RCC_OscConfig+0x2ce>
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	42470000 	.word	0x42470000
 8002380:	42470e80 	.word	0x42470e80
 8002384:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002388:	f7ff fb20 	bl	80019cc <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e106      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	4b85      	ldr	r3, [pc, #532]	; (80025b0 <HAL_RCC_OscConfig+0x4e4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d106      	bne.n	80023bc <HAL_RCC_OscConfig+0x2f0>
 80023ae:	4b81      	ldr	r3, [pc, #516]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b2:	4a80      	ldr	r2, [pc, #512]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ba:	e01c      	b.n	80023f6 <HAL_RCC_OscConfig+0x32a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b05      	cmp	r3, #5
 80023c2:	d10c      	bne.n	80023de <HAL_RCC_OscConfig+0x312>
 80023c4:	4b7b      	ldr	r3, [pc, #492]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4a7a      	ldr	r2, [pc, #488]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 80023ca:	f043 0304 	orr.w	r3, r3, #4
 80023ce:	6713      	str	r3, [r2, #112]	; 0x70
 80023d0:	4b78      	ldr	r3, [pc, #480]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	4a77      	ldr	r2, [pc, #476]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6713      	str	r3, [r2, #112]	; 0x70
 80023dc:	e00b      	b.n	80023f6 <HAL_RCC_OscConfig+0x32a>
 80023de:	4b75      	ldr	r3, [pc, #468]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	4a74      	ldr	r2, [pc, #464]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ea:	4b72      	ldr	r3, [pc, #456]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 80023ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ee:	4a71      	ldr	r2, [pc, #452]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 80023f0:	f023 0304 	bic.w	r3, r3, #4
 80023f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d015      	beq.n	800242a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fe:	f7ff fae5 	bl	80019cc <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002404:	e00a      	b.n	800241c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002406:	f7ff fae1 	bl	80019cc <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f241 3288 	movw	r2, #5000	; 0x1388
 8002414:	4293      	cmp	r3, r2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e0c5      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241c:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0ee      	beq.n	8002406 <HAL_RCC_OscConfig+0x33a>
 8002428:	e014      	b.n	8002454 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242a:	f7ff facf 	bl	80019cc <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7ff facb 	bl	80019cc <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0af      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002448:	4b5a      	ldr	r3, [pc, #360]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1ee      	bne.n	8002432 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002454:	7dfb      	ldrb	r3, [r7, #23]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d105      	bne.n	8002466 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245a:	4b56      	ldr	r3, [pc, #344]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4a55      	ldr	r2, [pc, #340]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 8002460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002464:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 809b 	beq.w	80025a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002470:	4b50      	ldr	r3, [pc, #320]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	2b08      	cmp	r3, #8
 800247a:	d05c      	beq.n	8002536 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d141      	bne.n	8002508 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002484:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <HAL_RCC_OscConfig+0x4ec>)
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248a:	f7ff fa9f 	bl	80019cc <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002492:	f7ff fa9b 	bl	80019cc <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e081      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a4:	4b43      	ldr	r3, [pc, #268]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f0      	bne.n	8002492 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69da      	ldr	r2, [r3, #28]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	019b      	lsls	r3, r3, #6
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	085b      	lsrs	r3, r3, #1
 80024c8:	3b01      	subs	r3, #1
 80024ca:	041b      	lsls	r3, r3, #16
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	061b      	lsls	r3, r3, #24
 80024d4:	4937      	ldr	r1, [pc, #220]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024da:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <HAL_RCC_OscConfig+0x4ec>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff fa74 	bl	80019cc <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e8:	f7ff fa70 	bl	80019cc <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e056      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fa:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x41c>
 8002506:	e04e      	b.n	80025a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCC_OscConfig+0x4ec>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7ff fa5d 	bl	80019cc <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002516:	f7ff fa59 	bl	80019cc <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e03f      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002528:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x44a>
 8002534:	e037      	b.n	80025a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e032      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002542:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <HAL_RCC_OscConfig+0x4e8>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d028      	beq.n	80025a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d121      	bne.n	80025a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d11a      	bne.n	80025a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002572:	4013      	ands	r3, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002578:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800257a:	4293      	cmp	r3, r2
 800257c:	d111      	bne.n	80025a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	085b      	lsrs	r3, r3, #1
 800258a:	3b01      	subs	r3, #1
 800258c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d107      	bne.n	80025a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40007000 	.word	0x40007000
 80025b4:	40023800 	.word	0x40023800
 80025b8:	42470060 	.word	0x42470060

080025bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0cc      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025d0:	4b68      	ldr	r3, [pc, #416]	; (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d90c      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b65      	ldr	r3, [pc, #404]	; (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	4b63      	ldr	r3, [pc, #396]	; (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0b8      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002610:	4b59      	ldr	r3, [pc, #356]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4a58      	ldr	r2, [pc, #352]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800261a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002628:	4b53      	ldr	r3, [pc, #332]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002634:	4b50      	ldr	r3, [pc, #320]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	494d      	ldr	r1, [pc, #308]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	4313      	orrs	r3, r2
 8002644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d044      	beq.n	80026dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d119      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e07f      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d003      	beq.n	800267a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002676:	2b03      	cmp	r3, #3
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267a:	4b3f      	ldr	r3, [pc, #252]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e06f      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268a:	4b3b      	ldr	r3, [pc, #236]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e067      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269a:	4b37      	ldr	r3, [pc, #220]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f023 0203 	bic.w	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4934      	ldr	r1, [pc, #208]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ac:	f7ff f98e 	bl	80019cc <HAL_GetTick>
 80026b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b4:	f7ff f98a 	bl	80019cc <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e04f      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 020c 	and.w	r2, r3, #12
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	429a      	cmp	r2, r3
 80026da:	d1eb      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026dc:	4b25      	ldr	r3, [pc, #148]	; (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d20c      	bcs.n	8002704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b22      	ldr	r3, [pc, #136]	; (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e032      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4916      	ldr	r1, [pc, #88]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	490e      	ldr	r1, [pc, #56]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002742:	f000 f821 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8002746:	4602      	mov	r2, r0
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	490a      	ldr	r1, [pc, #40]	; (800277c <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	5ccb      	ldrb	r3, [r1, r3]
 8002756:	fa22 f303 	lsr.w	r3, r2, r3
 800275a:	4a09      	ldr	r2, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff f8ee 	bl	8001944 <HAL_InitTick>

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40023c00 	.word	0x40023c00
 8002778:	40023800 	.word	0x40023800
 800277c:	08003f94 	.word	0x08003f94
 8002780:	200000f4 	.word	0x200000f4
 8002784:	200000f8 	.word	0x200000f8

08002788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002788:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	2300      	movs	r3, #0
 800279a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027a0:	4b67      	ldr	r3, [pc, #412]	; (8002940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d00d      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x40>
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	f200 80bd 	bhi.w	800292c <HAL_RCC_GetSysClockFreq+0x1a4>
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x34>
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d003      	beq.n	80027c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ba:	e0b7      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4b61      	ldr	r3, [pc, #388]	; (8002944 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027be:	60bb      	str	r3, [r7, #8]
       break;
 80027c0:	e0b7      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027c2:	4b61      	ldr	r3, [pc, #388]	; (8002948 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80027c4:	60bb      	str	r3, [r7, #8]
      break;
 80027c6:	e0b4      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027c8:	4b5d      	ldr	r3, [pc, #372]	; (8002940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027d2:	4b5b      	ldr	r3, [pc, #364]	; (8002940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d04d      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027de:	4b58      	ldr	r3, [pc, #352]	; (8002940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	099b      	lsrs	r3, r3, #6
 80027e4:	461a      	mov	r2, r3
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027ee:	f04f 0100 	mov.w	r1, #0
 80027f2:	ea02 0800 	and.w	r8, r2, r0
 80027f6:	ea03 0901 	and.w	r9, r3, r1
 80027fa:	4640      	mov	r0, r8
 80027fc:	4649      	mov	r1, r9
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	014b      	lsls	r3, r1, #5
 8002808:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800280c:	0142      	lsls	r2, r0, #5
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	ebb0 0008 	subs.w	r0, r0, r8
 8002816:	eb61 0109 	sbc.w	r1, r1, r9
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	018b      	lsls	r3, r1, #6
 8002824:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002828:	0182      	lsls	r2, r0, #6
 800282a:	1a12      	subs	r2, r2, r0
 800282c:	eb63 0301 	sbc.w	r3, r3, r1
 8002830:	f04f 0000 	mov.w	r0, #0
 8002834:	f04f 0100 	mov.w	r1, #0
 8002838:	00d9      	lsls	r1, r3, #3
 800283a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800283e:	00d0      	lsls	r0, r2, #3
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	eb12 0208 	adds.w	r2, r2, r8
 8002848:	eb43 0309 	adc.w	r3, r3, r9
 800284c:	f04f 0000 	mov.w	r0, #0
 8002850:	f04f 0100 	mov.w	r1, #0
 8002854:	0259      	lsls	r1, r3, #9
 8002856:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800285a:	0250      	lsls	r0, r2, #9
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4610      	mov	r0, r2
 8002862:	4619      	mov	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	461a      	mov	r2, r3
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	f7fe fa3c 	bl	8000ce8 <__aeabi_uldivmod>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4613      	mov	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e04a      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287a:	4b31      	ldr	r3, [pc, #196]	; (8002940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	099b      	lsrs	r3, r3, #6
 8002880:	461a      	mov	r2, r3
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	f240 10ff 	movw	r0, #511	; 0x1ff
 800288a:	f04f 0100 	mov.w	r1, #0
 800288e:	ea02 0400 	and.w	r4, r2, r0
 8002892:	ea03 0501 	and.w	r5, r3, r1
 8002896:	4620      	mov	r0, r4
 8002898:	4629      	mov	r1, r5
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	014b      	lsls	r3, r1, #5
 80028a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028a8:	0142      	lsls	r2, r0, #5
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	1b00      	subs	r0, r0, r4
 80028b0:	eb61 0105 	sbc.w	r1, r1, r5
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	018b      	lsls	r3, r1, #6
 80028be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028c2:	0182      	lsls	r2, r0, #6
 80028c4:	1a12      	subs	r2, r2, r0
 80028c6:	eb63 0301 	sbc.w	r3, r3, r1
 80028ca:	f04f 0000 	mov.w	r0, #0
 80028ce:	f04f 0100 	mov.w	r1, #0
 80028d2:	00d9      	lsls	r1, r3, #3
 80028d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028d8:	00d0      	lsls	r0, r2, #3
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	1912      	adds	r2, r2, r4
 80028e0:	eb45 0303 	adc.w	r3, r5, r3
 80028e4:	f04f 0000 	mov.w	r0, #0
 80028e8:	f04f 0100 	mov.w	r1, #0
 80028ec:	0299      	lsls	r1, r3, #10
 80028ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028f2:	0290      	lsls	r0, r2, #10
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	461a      	mov	r2, r3
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	f7fe f9f0 	bl	8000ce8 <__aeabi_uldivmod>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4613      	mov	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	0c1b      	lsrs	r3, r3, #16
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	3301      	adds	r3, #1
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	60bb      	str	r3, [r7, #8]
      break;
 800292a:	e002      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800292e:	60bb      	str	r3, [r7, #8]
      break;
 8002930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002932:	68bb      	ldr	r3, [r7, #8]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	00f42400 	.word	0x00f42400
 8002948:	007a1200 	.word	0x007a1200

0800294c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <HAL_RCC_GetHCLKFreq+0x14>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	200000f4 	.word	0x200000f4

08002964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002968:	f7ff fff0 	bl	800294c <HAL_RCC_GetHCLKFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	0a9b      	lsrs	r3, r3, #10
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	4903      	ldr	r1, [pc, #12]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40023800 	.word	0x40023800
 8002988:	08003fa4 	.word	0x08003fa4

0800298c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002990:	f7ff ffdc 	bl	800294c <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	0b5b      	lsrs	r3, r3, #13
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4903      	ldr	r1, [pc, #12]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40023800 	.word	0x40023800
 80029b0:	08003fa4 	.word	0x08003fa4

080029b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e03f      	b.n	8002a46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe fe9a 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2224      	movs	r2, #36	; 0x24
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fc7b 	bl	80032f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b08a      	sub	sp, #40	; 0x28
 8002a52:	af02      	add	r7, sp, #8
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b20      	cmp	r3, #32
 8002a6c:	d17c      	bne.n	8002b68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <HAL_UART_Transmit+0x2c>
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e075      	b.n	8002b6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_UART_Transmit+0x3e>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e06e      	b.n	8002b6a <HAL_UART_Transmit+0x11c>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2221      	movs	r2, #33	; 0x21
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aa2:	f7fe ff93 	bl	80019cc <HAL_GetTick>
 8002aa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	88fa      	ldrh	r2, [r7, #6]
 8002aac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	88fa      	ldrh	r2, [r7, #6]
 8002ab2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abc:	d108      	bne.n	8002ad0 <HAL_UART_Transmit+0x82>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d104      	bne.n	8002ad0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	e003      	b.n	8002ad8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ae0:	e02a      	b.n	8002b38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2180      	movs	r1, #128	; 0x80
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 fa3d 	bl	8002f6c <UART_WaitOnFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e036      	b.n	8002b6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10b      	bne.n	8002b1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	3302      	adds	r3, #2
 8002b16:	61bb      	str	r3, [r7, #24]
 8002b18:	e007      	b.n	8002b2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	3301      	adds	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1cf      	bne.n	8002ae2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2140      	movs	r1, #64	; 0x40
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 fa0d 	bl	8002f6c <UART_WaitOnFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e006      	b.n	8002b6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	e000      	b.n	8002b6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b68:	2302      	movs	r3, #2
  }
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3720      	adds	r7, #32
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d11d      	bne.n	8002bc8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_UART_Receive_IT+0x26>
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e016      	b.n	8002bca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_UART_Receive_IT+0x38>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e00f      	b.n	8002bca <HAL_UART_Receive_IT+0x58>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 fa1e 	bl	8003000 <UART_Start_Receive_IT>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	e000      	b.n	8002bca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
  }
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10d      	bne.n	8002c26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	f003 0320 	and.w	r3, r3, #32
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_UART_IRQHandler+0x52>
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fad1 	bl	80031c6 <UART_Receive_IT>
      return;
 8002c24:	e17c      	b.n	8002f20 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80b1 	beq.w	8002d90 <HAL_UART_IRQHandler+0x1bc>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d105      	bne.n	8002c44 <HAL_UART_IRQHandler+0x70>
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80a6 	beq.w	8002d90 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_UART_IRQHandler+0x90>
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f043 0201 	orr.w	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_UART_IRQHandler+0xb0>
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f043 0202 	orr.w	r2, r3, #2
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_UART_IRQHandler+0xd0>
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	f043 0204 	orr.w	r2, r3, #4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00f      	beq.n	8002cce <HAL_UART_IRQHandler+0xfa>
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d104      	bne.n	8002cc2 <HAL_UART_IRQHandler+0xee>
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f043 0208 	orr.w	r2, r3, #8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 811f 	beq.w	8002f16 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x11e>
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fa6a 	bl	80031c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <HAL_UART_IRQHandler+0x146>
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d031      	beq.n	8002d7e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f9aa 	bl	8003074 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d123      	bne.n	8002d76 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d013      	beq.n	8002d6e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	4a77      	ldr	r2, [pc, #476]	; (8002f28 <HAL_UART_IRQHandler+0x354>)
 8002d4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe ffc7 	bl	8001ce6 <HAL_DMA_Abort_IT>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d016      	beq.n	8002d8c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6c:	e00e      	b.n	8002d8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f8e6 	bl	8002f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d74:	e00a      	b.n	8002d8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f8e2 	bl	8002f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7c:	e006      	b.n	8002d8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f8de 	bl	8002f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d8a:	e0c4      	b.n	8002f16 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d8c:	bf00      	nop
    return;
 8002d8e:	e0c2      	b.n	8002f16 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	f040 80a2 	bne.w	8002ede <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 809c 	beq.w	8002ede <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 8096 	beq.w	8002ede <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd2:	2b40      	cmp	r3, #64	; 0x40
 8002dd4:	d14f      	bne.n	8002e76 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002de0:	8a3b      	ldrh	r3, [r7, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 8099 	beq.w	8002f1a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dec:	8a3a      	ldrh	r2, [r7, #16]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	f080 8093 	bcs.w	8002f1a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8a3a      	ldrh	r2, [r7, #16]
 8002df8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e04:	d02b      	beq.n	8002e5e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e14:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695a      	ldr	r2, [r3, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e34:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0210 	bic.w	r2, r2, #16
 8002e52:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe fed4 	bl	8001c06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f870 	bl	8002f54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e74:	e051      	b.n	8002f1a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d047      	beq.n	8002f1e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002e8e:	8a7b      	ldrh	r3, [r7, #18]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d044      	beq.n	8002f1e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ea2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0210 	bic.w	r2, r2, #16
 8002ed0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ed2:	8a7b      	ldrh	r3, [r7, #18]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f83c 	bl	8002f54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002edc:	e01f      	b.n	8002f1e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_UART_IRQHandler+0x326>
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f8ff 	bl	80030f6 <UART_Transmit_IT>
    return;
 8002ef8:	e012      	b.n	8002f20 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00d      	beq.n	8002f20 <HAL_UART_IRQHandler+0x34c>
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f941 	bl	8003196 <UART_EndTransmit_IT>
    return;
 8002f14:	e004      	b.n	8002f20 <HAL_UART_IRQHandler+0x34c>
    return;
 8002f16:	bf00      	nop
 8002f18:	e002      	b.n	8002f20 <HAL_UART_IRQHandler+0x34c>
      return;
 8002f1a:	bf00      	nop
 8002f1c:	e000      	b.n	8002f20 <HAL_UART_IRQHandler+0x34c>
      return;
 8002f1e:	bf00      	nop
  }
}
 8002f20:	3728      	adds	r7, #40	; 0x28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	080030cf 	.word	0x080030cf

08002f2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f7c:	e02c      	b.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d028      	beq.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d007      	beq.n	8002f9c <UART_WaitOnFlagUntilTimeout+0x30>
 8002f8c:	f7fe fd1e 	bl	80019cc <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d21d      	bcs.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002faa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e00f      	b.n	8002ff8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d0c3      	beq.n	8002f7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	4613      	mov	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	88fa      	ldrh	r2, [r7, #6]
 8003018:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2222      	movs	r2, #34	; 0x22
 800302a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003044:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0220 	orr.w	r2, r2, #32
 8003064:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800308a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0201 	bic.w	r2, r2, #1
 800309a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d107      	bne.n	80030b4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0210 	bic.w	r2, r2, #16
 80030b2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f7ff ff29 	bl	8002f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b085      	sub	sp, #20
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b21      	cmp	r3, #33	; 0x21
 8003108:	d13e      	bne.n	8003188 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003112:	d114      	bne.n	800313e <UART_Transmit_IT+0x48>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d110      	bne.n	800313e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003130:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	1c9a      	adds	r2, r3, #2
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	621a      	str	r2, [r3, #32]
 800313c:	e008      	b.n	8003150 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	1c59      	adds	r1, r3, #1
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6211      	str	r1, [r2, #32]
 8003148:	781a      	ldrb	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29b      	uxth	r3, r3
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4619      	mov	r1, r3
 800315e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10f      	bne.n	8003184 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003172:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003182:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	e000      	b.n	800318a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003188:	2302      	movs	r3, #2
  }
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff feb8 	bl	8002f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b22      	cmp	r3, #34	; 0x22
 80031d8:	f040 8087 	bne.w	80032ea <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e4:	d117      	bne.n	8003216 <UART_Receive_IT+0x50>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d113      	bne.n	8003216 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003204:	b29a      	uxth	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	1c9a      	adds	r2, r3, #2
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	629a      	str	r2, [r3, #40]	; 0x28
 8003214:	e026      	b.n	8003264 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003228:	d007      	beq.n	800323a <UART_Receive_IT+0x74>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <UART_Receive_IT+0x82>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e008      	b.n	800325a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003254:	b2da      	uxtb	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29b      	uxth	r3, r3
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4619      	mov	r1, r3
 8003272:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003274:	2b00      	cmp	r3, #0
 8003276:	d136      	bne.n	80032e6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0220 	bic.w	r2, r2, #32
 8003286:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003296:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d10e      	bne.n	80032d6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0210 	bic.w	r2, r2, #16
 80032c6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032cc:	4619      	mov	r1, r3
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff fe40 	bl	8002f54 <HAL_UARTEx_RxEventCallback>
 80032d4:	e002      	b.n	80032dc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fe f9ce 	bl	8001678 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e002      	b.n	80032ec <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e000      	b.n	80032ec <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80032ea:	2302      	movs	r3, #2
  }
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f8:	b09f      	sub	sp, #124	; 0x7c
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800330a:	68d9      	ldr	r1, [r3, #12]
 800330c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	ea40 0301 	orr.w	r3, r0, r1
 8003314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	431a      	orrs	r2, r3
 8003320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	431a      	orrs	r2, r3
 8003326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	4313      	orrs	r3, r2
 800332c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800332e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003338:	f021 010c 	bic.w	r1, r1, #12
 800333c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003342:	430b      	orrs	r3, r1
 8003344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003352:	6999      	ldr	r1, [r3, #24]
 8003354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	ea40 0301 	orr.w	r3, r0, r1
 800335c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800335e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4bc5      	ldr	r3, [pc, #788]	; (8003678 <UART_SetConfig+0x384>)
 8003364:	429a      	cmp	r2, r3
 8003366:	d004      	beq.n	8003372 <UART_SetConfig+0x7e>
 8003368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4bc3      	ldr	r3, [pc, #780]	; (800367c <UART_SetConfig+0x388>)
 800336e:	429a      	cmp	r2, r3
 8003370:	d103      	bne.n	800337a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003372:	f7ff fb0b 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 8003376:	6778      	str	r0, [r7, #116]	; 0x74
 8003378:	e002      	b.n	8003380 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800337a:	f7ff faf3 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 800337e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003388:	f040 80b6 	bne.w	80034f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800338c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800338e:	461c      	mov	r4, r3
 8003390:	f04f 0500 	mov.w	r5, #0
 8003394:	4622      	mov	r2, r4
 8003396:	462b      	mov	r3, r5
 8003398:	1891      	adds	r1, r2, r2
 800339a:	6439      	str	r1, [r7, #64]	; 0x40
 800339c:	415b      	adcs	r3, r3
 800339e:	647b      	str	r3, [r7, #68]	; 0x44
 80033a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033a4:	1912      	adds	r2, r2, r4
 80033a6:	eb45 0303 	adc.w	r3, r5, r3
 80033aa:	f04f 0000 	mov.w	r0, #0
 80033ae:	f04f 0100 	mov.w	r1, #0
 80033b2:	00d9      	lsls	r1, r3, #3
 80033b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033b8:	00d0      	lsls	r0, r2, #3
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	1911      	adds	r1, r2, r4
 80033c0:	6639      	str	r1, [r7, #96]	; 0x60
 80033c2:	416b      	adcs	r3, r5
 80033c4:	667b      	str	r3, [r7, #100]	; 0x64
 80033c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	461a      	mov	r2, r3
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	1891      	adds	r1, r2, r2
 80033d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80033d4:	415b      	adcs	r3, r3
 80033d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80033e0:	f7fd fc82 	bl	8000ce8 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4ba5      	ldr	r3, [pc, #660]	; (8003680 <UART_SetConfig+0x38c>)
 80033ea:	fba3 2302 	umull	r2, r3, r3, r2
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	011e      	lsls	r6, r3, #4
 80033f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f4:	461c      	mov	r4, r3
 80033f6:	f04f 0500 	mov.w	r5, #0
 80033fa:	4622      	mov	r2, r4
 80033fc:	462b      	mov	r3, r5
 80033fe:	1891      	adds	r1, r2, r2
 8003400:	6339      	str	r1, [r7, #48]	; 0x30
 8003402:	415b      	adcs	r3, r3
 8003404:	637b      	str	r3, [r7, #52]	; 0x34
 8003406:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800340a:	1912      	adds	r2, r2, r4
 800340c:	eb45 0303 	adc.w	r3, r5, r3
 8003410:	f04f 0000 	mov.w	r0, #0
 8003414:	f04f 0100 	mov.w	r1, #0
 8003418:	00d9      	lsls	r1, r3, #3
 800341a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800341e:	00d0      	lsls	r0, r2, #3
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	1911      	adds	r1, r2, r4
 8003426:	65b9      	str	r1, [r7, #88]	; 0x58
 8003428:	416b      	adcs	r3, r5
 800342a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800342c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	461a      	mov	r2, r3
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	1891      	adds	r1, r2, r2
 8003438:	62b9      	str	r1, [r7, #40]	; 0x28
 800343a:	415b      	adcs	r3, r3
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800343e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003442:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003446:	f7fd fc4f 	bl	8000ce8 <__aeabi_uldivmod>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4b8c      	ldr	r3, [pc, #560]	; (8003680 <UART_SetConfig+0x38c>)
 8003450:	fba3 1302 	umull	r1, r3, r3, r2
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	2164      	movs	r1, #100	; 0x64
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	3332      	adds	r3, #50	; 0x32
 8003462:	4a87      	ldr	r2, [pc, #540]	; (8003680 <UART_SetConfig+0x38c>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003470:	441e      	add	r6, r3
 8003472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003474:	4618      	mov	r0, r3
 8003476:	f04f 0100 	mov.w	r1, #0
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	1894      	adds	r4, r2, r2
 8003480:	623c      	str	r4, [r7, #32]
 8003482:	415b      	adcs	r3, r3
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
 8003486:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800348a:	1812      	adds	r2, r2, r0
 800348c:	eb41 0303 	adc.w	r3, r1, r3
 8003490:	f04f 0400 	mov.w	r4, #0
 8003494:	f04f 0500 	mov.w	r5, #0
 8003498:	00dd      	lsls	r5, r3, #3
 800349a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800349e:	00d4      	lsls	r4, r2, #3
 80034a0:	4622      	mov	r2, r4
 80034a2:	462b      	mov	r3, r5
 80034a4:	1814      	adds	r4, r2, r0
 80034a6:	653c      	str	r4, [r7, #80]	; 0x50
 80034a8:	414b      	adcs	r3, r1
 80034aa:	657b      	str	r3, [r7, #84]	; 0x54
 80034ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	461a      	mov	r2, r3
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	1891      	adds	r1, r2, r2
 80034b8:	61b9      	str	r1, [r7, #24]
 80034ba:	415b      	adcs	r3, r3
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80034c6:	f7fd fc0f 	bl	8000ce8 <__aeabi_uldivmod>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4b6c      	ldr	r3, [pc, #432]	; (8003680 <UART_SetConfig+0x38c>)
 80034d0:	fba3 1302 	umull	r1, r3, r3, r2
 80034d4:	095b      	lsrs	r3, r3, #5
 80034d6:	2164      	movs	r1, #100	; 0x64
 80034d8:	fb01 f303 	mul.w	r3, r1, r3
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	3332      	adds	r3, #50	; 0x32
 80034e2:	4a67      	ldr	r2, [pc, #412]	; (8003680 <UART_SetConfig+0x38c>)
 80034e4:	fba2 2303 	umull	r2, r3, r2, r3
 80034e8:	095b      	lsrs	r3, r3, #5
 80034ea:	f003 0207 	and.w	r2, r3, #7
 80034ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4432      	add	r2, r6
 80034f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034f6:	e0b9      	b.n	800366c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034fa:	461c      	mov	r4, r3
 80034fc:	f04f 0500 	mov.w	r5, #0
 8003500:	4622      	mov	r2, r4
 8003502:	462b      	mov	r3, r5
 8003504:	1891      	adds	r1, r2, r2
 8003506:	6139      	str	r1, [r7, #16]
 8003508:	415b      	adcs	r3, r3
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003510:	1912      	adds	r2, r2, r4
 8003512:	eb45 0303 	adc.w	r3, r5, r3
 8003516:	f04f 0000 	mov.w	r0, #0
 800351a:	f04f 0100 	mov.w	r1, #0
 800351e:	00d9      	lsls	r1, r3, #3
 8003520:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003524:	00d0      	lsls	r0, r2, #3
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	eb12 0804 	adds.w	r8, r2, r4
 800352e:	eb43 0905 	adc.w	r9, r3, r5
 8003532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	4618      	mov	r0, r3
 8003538:	f04f 0100 	mov.w	r1, #0
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	008b      	lsls	r3, r1, #2
 8003546:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800354a:	0082      	lsls	r2, r0, #2
 800354c:	4640      	mov	r0, r8
 800354e:	4649      	mov	r1, r9
 8003550:	f7fd fbca 	bl	8000ce8 <__aeabi_uldivmod>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4b49      	ldr	r3, [pc, #292]	; (8003680 <UART_SetConfig+0x38c>)
 800355a:	fba3 2302 	umull	r2, r3, r3, r2
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	011e      	lsls	r6, r3, #4
 8003562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003564:	4618      	mov	r0, r3
 8003566:	f04f 0100 	mov.w	r1, #0
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	1894      	adds	r4, r2, r2
 8003570:	60bc      	str	r4, [r7, #8]
 8003572:	415b      	adcs	r3, r3
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800357a:	1812      	adds	r2, r2, r0
 800357c:	eb41 0303 	adc.w	r3, r1, r3
 8003580:	f04f 0400 	mov.w	r4, #0
 8003584:	f04f 0500 	mov.w	r5, #0
 8003588:	00dd      	lsls	r5, r3, #3
 800358a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800358e:	00d4      	lsls	r4, r2, #3
 8003590:	4622      	mov	r2, r4
 8003592:	462b      	mov	r3, r5
 8003594:	1814      	adds	r4, r2, r0
 8003596:	64bc      	str	r4, [r7, #72]	; 0x48
 8003598:	414b      	adcs	r3, r1
 800359a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800359c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f04f 0100 	mov.w	r1, #0
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	008b      	lsls	r3, r1, #2
 80035b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80035b4:	0082      	lsls	r2, r0, #2
 80035b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80035ba:	f7fd fb95 	bl	8000ce8 <__aeabi_uldivmod>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4b2f      	ldr	r3, [pc, #188]	; (8003680 <UART_SetConfig+0x38c>)
 80035c4:	fba3 1302 	umull	r1, r3, r3, r2
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	2164      	movs	r1, #100	; 0x64
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	3332      	adds	r3, #50	; 0x32
 80035d6:	4a2a      	ldr	r2, [pc, #168]	; (8003680 <UART_SetConfig+0x38c>)
 80035d8:	fba2 2303 	umull	r2, r3, r2, r3
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e2:	441e      	add	r6, r3
 80035e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e6:	4618      	mov	r0, r3
 80035e8:	f04f 0100 	mov.w	r1, #0
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	1894      	adds	r4, r2, r2
 80035f2:	603c      	str	r4, [r7, #0]
 80035f4:	415b      	adcs	r3, r3
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035fc:	1812      	adds	r2, r2, r0
 80035fe:	eb41 0303 	adc.w	r3, r1, r3
 8003602:	f04f 0400 	mov.w	r4, #0
 8003606:	f04f 0500 	mov.w	r5, #0
 800360a:	00dd      	lsls	r5, r3, #3
 800360c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003610:	00d4      	lsls	r4, r2, #3
 8003612:	4622      	mov	r2, r4
 8003614:	462b      	mov	r3, r5
 8003616:	eb12 0a00 	adds.w	sl, r2, r0
 800361a:	eb43 0b01 	adc.w	fp, r3, r1
 800361e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4618      	mov	r0, r3
 8003624:	f04f 0100 	mov.w	r1, #0
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	008b      	lsls	r3, r1, #2
 8003632:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003636:	0082      	lsls	r2, r0, #2
 8003638:	4650      	mov	r0, sl
 800363a:	4659      	mov	r1, fp
 800363c:	f7fd fb54 	bl	8000ce8 <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <UART_SetConfig+0x38c>)
 8003646:	fba3 1302 	umull	r1, r3, r3, r2
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2164      	movs	r1, #100	; 0x64
 800364e:	fb01 f303 	mul.w	r3, r1, r3
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	3332      	adds	r3, #50	; 0x32
 8003658:	4a09      	ldr	r2, [pc, #36]	; (8003680 <UART_SetConfig+0x38c>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	f003 020f 	and.w	r2, r3, #15
 8003664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4432      	add	r2, r6
 800366a:	609a      	str	r2, [r3, #8]
}
 800366c:	bf00      	nop
 800366e:	377c      	adds	r7, #124	; 0x7c
 8003670:	46bd      	mov	sp, r7
 8003672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003676:	bf00      	nop
 8003678:	40011000 	.word	0x40011000
 800367c:	40011400 	.word	0x40011400
 8003680:	51eb851f 	.word	0x51eb851f

08003684 <__errno>:
 8003684:	4b01      	ldr	r3, [pc, #4]	; (800368c <__errno+0x8>)
 8003686:	6818      	ldr	r0, [r3, #0]
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000100 	.word	0x20000100

08003690 <__libc_init_array>:
 8003690:	b570      	push	{r4, r5, r6, lr}
 8003692:	4d0d      	ldr	r5, [pc, #52]	; (80036c8 <__libc_init_array+0x38>)
 8003694:	4c0d      	ldr	r4, [pc, #52]	; (80036cc <__libc_init_array+0x3c>)
 8003696:	1b64      	subs	r4, r4, r5
 8003698:	10a4      	asrs	r4, r4, #2
 800369a:	2600      	movs	r6, #0
 800369c:	42a6      	cmp	r6, r4
 800369e:	d109      	bne.n	80036b4 <__libc_init_array+0x24>
 80036a0:	4d0b      	ldr	r5, [pc, #44]	; (80036d0 <__libc_init_array+0x40>)
 80036a2:	4c0c      	ldr	r4, [pc, #48]	; (80036d4 <__libc_init_array+0x44>)
 80036a4:	f000 fc4e 	bl	8003f44 <_init>
 80036a8:	1b64      	subs	r4, r4, r5
 80036aa:	10a4      	asrs	r4, r4, #2
 80036ac:	2600      	movs	r6, #0
 80036ae:	42a6      	cmp	r6, r4
 80036b0:	d105      	bne.n	80036be <__libc_init_array+0x2e>
 80036b2:	bd70      	pop	{r4, r5, r6, pc}
 80036b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b8:	4798      	blx	r3
 80036ba:	3601      	adds	r6, #1
 80036bc:	e7ee      	b.n	800369c <__libc_init_array+0xc>
 80036be:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c2:	4798      	blx	r3
 80036c4:	3601      	adds	r6, #1
 80036c6:	e7f2      	b.n	80036ae <__libc_init_array+0x1e>
 80036c8:	08003fe8 	.word	0x08003fe8
 80036cc:	08003fe8 	.word	0x08003fe8
 80036d0:	08003fe8 	.word	0x08003fe8
 80036d4:	08003fec 	.word	0x08003fec

080036d8 <memset>:
 80036d8:	4402      	add	r2, r0
 80036da:	4603      	mov	r3, r0
 80036dc:	4293      	cmp	r3, r2
 80036de:	d100      	bne.n	80036e2 <memset+0xa>
 80036e0:	4770      	bx	lr
 80036e2:	f803 1b01 	strb.w	r1, [r3], #1
 80036e6:	e7f9      	b.n	80036dc <memset+0x4>

080036e8 <siprintf>:
 80036e8:	b40e      	push	{r1, r2, r3}
 80036ea:	b500      	push	{lr}
 80036ec:	b09c      	sub	sp, #112	; 0x70
 80036ee:	ab1d      	add	r3, sp, #116	; 0x74
 80036f0:	9002      	str	r0, [sp, #8]
 80036f2:	9006      	str	r0, [sp, #24]
 80036f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036f8:	4809      	ldr	r0, [pc, #36]	; (8003720 <siprintf+0x38>)
 80036fa:	9107      	str	r1, [sp, #28]
 80036fc:	9104      	str	r1, [sp, #16]
 80036fe:	4909      	ldr	r1, [pc, #36]	; (8003724 <siprintf+0x3c>)
 8003700:	f853 2b04 	ldr.w	r2, [r3], #4
 8003704:	9105      	str	r1, [sp, #20]
 8003706:	6800      	ldr	r0, [r0, #0]
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	a902      	add	r1, sp, #8
 800370c:	f000 f868 	bl	80037e0 <_svfiprintf_r>
 8003710:	9b02      	ldr	r3, [sp, #8]
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	b01c      	add	sp, #112	; 0x70
 8003718:	f85d eb04 	ldr.w	lr, [sp], #4
 800371c:	b003      	add	sp, #12
 800371e:	4770      	bx	lr
 8003720:	20000100 	.word	0x20000100
 8003724:	ffff0208 	.word	0xffff0208

08003728 <__ssputs_r>:
 8003728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800372c:	688e      	ldr	r6, [r1, #8]
 800372e:	429e      	cmp	r6, r3
 8003730:	4682      	mov	sl, r0
 8003732:	460c      	mov	r4, r1
 8003734:	4690      	mov	r8, r2
 8003736:	461f      	mov	r7, r3
 8003738:	d838      	bhi.n	80037ac <__ssputs_r+0x84>
 800373a:	898a      	ldrh	r2, [r1, #12]
 800373c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003740:	d032      	beq.n	80037a8 <__ssputs_r+0x80>
 8003742:	6825      	ldr	r5, [r4, #0]
 8003744:	6909      	ldr	r1, [r1, #16]
 8003746:	eba5 0901 	sub.w	r9, r5, r1
 800374a:	6965      	ldr	r5, [r4, #20]
 800374c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003750:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003754:	3301      	adds	r3, #1
 8003756:	444b      	add	r3, r9
 8003758:	106d      	asrs	r5, r5, #1
 800375a:	429d      	cmp	r5, r3
 800375c:	bf38      	it	cc
 800375e:	461d      	movcc	r5, r3
 8003760:	0553      	lsls	r3, r2, #21
 8003762:	d531      	bpl.n	80037c8 <__ssputs_r+0xa0>
 8003764:	4629      	mov	r1, r5
 8003766:	f000 fb47 	bl	8003df8 <_malloc_r>
 800376a:	4606      	mov	r6, r0
 800376c:	b950      	cbnz	r0, 8003784 <__ssputs_r+0x5c>
 800376e:	230c      	movs	r3, #12
 8003770:	f8ca 3000 	str.w	r3, [sl]
 8003774:	89a3      	ldrh	r3, [r4, #12]
 8003776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800377a:	81a3      	strh	r3, [r4, #12]
 800377c:	f04f 30ff 	mov.w	r0, #4294967295
 8003780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003784:	6921      	ldr	r1, [r4, #16]
 8003786:	464a      	mov	r2, r9
 8003788:	f000 fabe 	bl	8003d08 <memcpy>
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003796:	81a3      	strh	r3, [r4, #12]
 8003798:	6126      	str	r6, [r4, #16]
 800379a:	6165      	str	r5, [r4, #20]
 800379c:	444e      	add	r6, r9
 800379e:	eba5 0509 	sub.w	r5, r5, r9
 80037a2:	6026      	str	r6, [r4, #0]
 80037a4:	60a5      	str	r5, [r4, #8]
 80037a6:	463e      	mov	r6, r7
 80037a8:	42be      	cmp	r6, r7
 80037aa:	d900      	bls.n	80037ae <__ssputs_r+0x86>
 80037ac:	463e      	mov	r6, r7
 80037ae:	4632      	mov	r2, r6
 80037b0:	6820      	ldr	r0, [r4, #0]
 80037b2:	4641      	mov	r1, r8
 80037b4:	f000 fab6 	bl	8003d24 <memmove>
 80037b8:	68a3      	ldr	r3, [r4, #8]
 80037ba:	6822      	ldr	r2, [r4, #0]
 80037bc:	1b9b      	subs	r3, r3, r6
 80037be:	4432      	add	r2, r6
 80037c0:	60a3      	str	r3, [r4, #8]
 80037c2:	6022      	str	r2, [r4, #0]
 80037c4:	2000      	movs	r0, #0
 80037c6:	e7db      	b.n	8003780 <__ssputs_r+0x58>
 80037c8:	462a      	mov	r2, r5
 80037ca:	f000 fb6f 	bl	8003eac <_realloc_r>
 80037ce:	4606      	mov	r6, r0
 80037d0:	2800      	cmp	r0, #0
 80037d2:	d1e1      	bne.n	8003798 <__ssputs_r+0x70>
 80037d4:	6921      	ldr	r1, [r4, #16]
 80037d6:	4650      	mov	r0, sl
 80037d8:	f000 fabe 	bl	8003d58 <_free_r>
 80037dc:	e7c7      	b.n	800376e <__ssputs_r+0x46>
	...

080037e0 <_svfiprintf_r>:
 80037e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e4:	4698      	mov	r8, r3
 80037e6:	898b      	ldrh	r3, [r1, #12]
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	b09d      	sub	sp, #116	; 0x74
 80037ec:	4607      	mov	r7, r0
 80037ee:	460d      	mov	r5, r1
 80037f0:	4614      	mov	r4, r2
 80037f2:	d50e      	bpl.n	8003812 <_svfiprintf_r+0x32>
 80037f4:	690b      	ldr	r3, [r1, #16]
 80037f6:	b963      	cbnz	r3, 8003812 <_svfiprintf_r+0x32>
 80037f8:	2140      	movs	r1, #64	; 0x40
 80037fa:	f000 fafd 	bl	8003df8 <_malloc_r>
 80037fe:	6028      	str	r0, [r5, #0]
 8003800:	6128      	str	r0, [r5, #16]
 8003802:	b920      	cbnz	r0, 800380e <_svfiprintf_r+0x2e>
 8003804:	230c      	movs	r3, #12
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	f04f 30ff 	mov.w	r0, #4294967295
 800380c:	e0d1      	b.n	80039b2 <_svfiprintf_r+0x1d2>
 800380e:	2340      	movs	r3, #64	; 0x40
 8003810:	616b      	str	r3, [r5, #20]
 8003812:	2300      	movs	r3, #0
 8003814:	9309      	str	r3, [sp, #36]	; 0x24
 8003816:	2320      	movs	r3, #32
 8003818:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800381c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003820:	2330      	movs	r3, #48	; 0x30
 8003822:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80039cc <_svfiprintf_r+0x1ec>
 8003826:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800382a:	f04f 0901 	mov.w	r9, #1
 800382e:	4623      	mov	r3, r4
 8003830:	469a      	mov	sl, r3
 8003832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003836:	b10a      	cbz	r2, 800383c <_svfiprintf_r+0x5c>
 8003838:	2a25      	cmp	r2, #37	; 0x25
 800383a:	d1f9      	bne.n	8003830 <_svfiprintf_r+0x50>
 800383c:	ebba 0b04 	subs.w	fp, sl, r4
 8003840:	d00b      	beq.n	800385a <_svfiprintf_r+0x7a>
 8003842:	465b      	mov	r3, fp
 8003844:	4622      	mov	r2, r4
 8003846:	4629      	mov	r1, r5
 8003848:	4638      	mov	r0, r7
 800384a:	f7ff ff6d 	bl	8003728 <__ssputs_r>
 800384e:	3001      	adds	r0, #1
 8003850:	f000 80aa 	beq.w	80039a8 <_svfiprintf_r+0x1c8>
 8003854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003856:	445a      	add	r2, fp
 8003858:	9209      	str	r2, [sp, #36]	; 0x24
 800385a:	f89a 3000 	ldrb.w	r3, [sl]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80a2 	beq.w	80039a8 <_svfiprintf_r+0x1c8>
 8003864:	2300      	movs	r3, #0
 8003866:	f04f 32ff 	mov.w	r2, #4294967295
 800386a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800386e:	f10a 0a01 	add.w	sl, sl, #1
 8003872:	9304      	str	r3, [sp, #16]
 8003874:	9307      	str	r3, [sp, #28]
 8003876:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800387a:	931a      	str	r3, [sp, #104]	; 0x68
 800387c:	4654      	mov	r4, sl
 800387e:	2205      	movs	r2, #5
 8003880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003884:	4851      	ldr	r0, [pc, #324]	; (80039cc <_svfiprintf_r+0x1ec>)
 8003886:	f7fc fcb3 	bl	80001f0 <memchr>
 800388a:	9a04      	ldr	r2, [sp, #16]
 800388c:	b9d8      	cbnz	r0, 80038c6 <_svfiprintf_r+0xe6>
 800388e:	06d0      	lsls	r0, r2, #27
 8003890:	bf44      	itt	mi
 8003892:	2320      	movmi	r3, #32
 8003894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003898:	0711      	lsls	r1, r2, #28
 800389a:	bf44      	itt	mi
 800389c:	232b      	movmi	r3, #43	; 0x2b
 800389e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038a2:	f89a 3000 	ldrb.w	r3, [sl]
 80038a6:	2b2a      	cmp	r3, #42	; 0x2a
 80038a8:	d015      	beq.n	80038d6 <_svfiprintf_r+0xf6>
 80038aa:	9a07      	ldr	r2, [sp, #28]
 80038ac:	4654      	mov	r4, sl
 80038ae:	2000      	movs	r0, #0
 80038b0:	f04f 0c0a 	mov.w	ip, #10
 80038b4:	4621      	mov	r1, r4
 80038b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038ba:	3b30      	subs	r3, #48	; 0x30
 80038bc:	2b09      	cmp	r3, #9
 80038be:	d94e      	bls.n	800395e <_svfiprintf_r+0x17e>
 80038c0:	b1b0      	cbz	r0, 80038f0 <_svfiprintf_r+0x110>
 80038c2:	9207      	str	r2, [sp, #28]
 80038c4:	e014      	b.n	80038f0 <_svfiprintf_r+0x110>
 80038c6:	eba0 0308 	sub.w	r3, r0, r8
 80038ca:	fa09 f303 	lsl.w	r3, r9, r3
 80038ce:	4313      	orrs	r3, r2
 80038d0:	9304      	str	r3, [sp, #16]
 80038d2:	46a2      	mov	sl, r4
 80038d4:	e7d2      	b.n	800387c <_svfiprintf_r+0x9c>
 80038d6:	9b03      	ldr	r3, [sp, #12]
 80038d8:	1d19      	adds	r1, r3, #4
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	9103      	str	r1, [sp, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bfbb      	ittet	lt
 80038e2:	425b      	neglt	r3, r3
 80038e4:	f042 0202 	orrlt.w	r2, r2, #2
 80038e8:	9307      	strge	r3, [sp, #28]
 80038ea:	9307      	strlt	r3, [sp, #28]
 80038ec:	bfb8      	it	lt
 80038ee:	9204      	strlt	r2, [sp, #16]
 80038f0:	7823      	ldrb	r3, [r4, #0]
 80038f2:	2b2e      	cmp	r3, #46	; 0x2e
 80038f4:	d10c      	bne.n	8003910 <_svfiprintf_r+0x130>
 80038f6:	7863      	ldrb	r3, [r4, #1]
 80038f8:	2b2a      	cmp	r3, #42	; 0x2a
 80038fa:	d135      	bne.n	8003968 <_svfiprintf_r+0x188>
 80038fc:	9b03      	ldr	r3, [sp, #12]
 80038fe:	1d1a      	adds	r2, r3, #4
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	9203      	str	r2, [sp, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	bfb8      	it	lt
 8003908:	f04f 33ff 	movlt.w	r3, #4294967295
 800390c:	3402      	adds	r4, #2
 800390e:	9305      	str	r3, [sp, #20]
 8003910:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80039dc <_svfiprintf_r+0x1fc>
 8003914:	7821      	ldrb	r1, [r4, #0]
 8003916:	2203      	movs	r2, #3
 8003918:	4650      	mov	r0, sl
 800391a:	f7fc fc69 	bl	80001f0 <memchr>
 800391e:	b140      	cbz	r0, 8003932 <_svfiprintf_r+0x152>
 8003920:	2340      	movs	r3, #64	; 0x40
 8003922:	eba0 000a 	sub.w	r0, r0, sl
 8003926:	fa03 f000 	lsl.w	r0, r3, r0
 800392a:	9b04      	ldr	r3, [sp, #16]
 800392c:	4303      	orrs	r3, r0
 800392e:	3401      	adds	r4, #1
 8003930:	9304      	str	r3, [sp, #16]
 8003932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003936:	4826      	ldr	r0, [pc, #152]	; (80039d0 <_svfiprintf_r+0x1f0>)
 8003938:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800393c:	2206      	movs	r2, #6
 800393e:	f7fc fc57 	bl	80001f0 <memchr>
 8003942:	2800      	cmp	r0, #0
 8003944:	d038      	beq.n	80039b8 <_svfiprintf_r+0x1d8>
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <_svfiprintf_r+0x1f4>)
 8003948:	bb1b      	cbnz	r3, 8003992 <_svfiprintf_r+0x1b2>
 800394a:	9b03      	ldr	r3, [sp, #12]
 800394c:	3307      	adds	r3, #7
 800394e:	f023 0307 	bic.w	r3, r3, #7
 8003952:	3308      	adds	r3, #8
 8003954:	9303      	str	r3, [sp, #12]
 8003956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003958:	4433      	add	r3, r6
 800395a:	9309      	str	r3, [sp, #36]	; 0x24
 800395c:	e767      	b.n	800382e <_svfiprintf_r+0x4e>
 800395e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003962:	460c      	mov	r4, r1
 8003964:	2001      	movs	r0, #1
 8003966:	e7a5      	b.n	80038b4 <_svfiprintf_r+0xd4>
 8003968:	2300      	movs	r3, #0
 800396a:	3401      	adds	r4, #1
 800396c:	9305      	str	r3, [sp, #20]
 800396e:	4619      	mov	r1, r3
 8003970:	f04f 0c0a 	mov.w	ip, #10
 8003974:	4620      	mov	r0, r4
 8003976:	f810 2b01 	ldrb.w	r2, [r0], #1
 800397a:	3a30      	subs	r2, #48	; 0x30
 800397c:	2a09      	cmp	r2, #9
 800397e:	d903      	bls.n	8003988 <_svfiprintf_r+0x1a8>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0c5      	beq.n	8003910 <_svfiprintf_r+0x130>
 8003984:	9105      	str	r1, [sp, #20]
 8003986:	e7c3      	b.n	8003910 <_svfiprintf_r+0x130>
 8003988:	fb0c 2101 	mla	r1, ip, r1, r2
 800398c:	4604      	mov	r4, r0
 800398e:	2301      	movs	r3, #1
 8003990:	e7f0      	b.n	8003974 <_svfiprintf_r+0x194>
 8003992:	ab03      	add	r3, sp, #12
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	462a      	mov	r2, r5
 8003998:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <_svfiprintf_r+0x1f8>)
 800399a:	a904      	add	r1, sp, #16
 800399c:	4638      	mov	r0, r7
 800399e:	f3af 8000 	nop.w
 80039a2:	1c42      	adds	r2, r0, #1
 80039a4:	4606      	mov	r6, r0
 80039a6:	d1d6      	bne.n	8003956 <_svfiprintf_r+0x176>
 80039a8:	89ab      	ldrh	r3, [r5, #12]
 80039aa:	065b      	lsls	r3, r3, #25
 80039ac:	f53f af2c 	bmi.w	8003808 <_svfiprintf_r+0x28>
 80039b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039b2:	b01d      	add	sp, #116	; 0x74
 80039b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b8:	ab03      	add	r3, sp, #12
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	462a      	mov	r2, r5
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <_svfiprintf_r+0x1f8>)
 80039c0:	a904      	add	r1, sp, #16
 80039c2:	4638      	mov	r0, r7
 80039c4:	f000 f87a 	bl	8003abc <_printf_i>
 80039c8:	e7eb      	b.n	80039a2 <_svfiprintf_r+0x1c2>
 80039ca:	bf00      	nop
 80039cc:	08003fac 	.word	0x08003fac
 80039d0:	08003fb6 	.word	0x08003fb6
 80039d4:	00000000 	.word	0x00000000
 80039d8:	08003729 	.word	0x08003729
 80039dc:	08003fb2 	.word	0x08003fb2

080039e0 <_printf_common>:
 80039e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039e4:	4616      	mov	r6, r2
 80039e6:	4699      	mov	r9, r3
 80039e8:	688a      	ldr	r2, [r1, #8]
 80039ea:	690b      	ldr	r3, [r1, #16]
 80039ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039f0:	4293      	cmp	r3, r2
 80039f2:	bfb8      	it	lt
 80039f4:	4613      	movlt	r3, r2
 80039f6:	6033      	str	r3, [r6, #0]
 80039f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039fc:	4607      	mov	r7, r0
 80039fe:	460c      	mov	r4, r1
 8003a00:	b10a      	cbz	r2, 8003a06 <_printf_common+0x26>
 8003a02:	3301      	adds	r3, #1
 8003a04:	6033      	str	r3, [r6, #0]
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	0699      	lsls	r1, r3, #26
 8003a0a:	bf42      	ittt	mi
 8003a0c:	6833      	ldrmi	r3, [r6, #0]
 8003a0e:	3302      	addmi	r3, #2
 8003a10:	6033      	strmi	r3, [r6, #0]
 8003a12:	6825      	ldr	r5, [r4, #0]
 8003a14:	f015 0506 	ands.w	r5, r5, #6
 8003a18:	d106      	bne.n	8003a28 <_printf_common+0x48>
 8003a1a:	f104 0a19 	add.w	sl, r4, #25
 8003a1e:	68e3      	ldr	r3, [r4, #12]
 8003a20:	6832      	ldr	r2, [r6, #0]
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	42ab      	cmp	r3, r5
 8003a26:	dc26      	bgt.n	8003a76 <_printf_common+0x96>
 8003a28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a2c:	1e13      	subs	r3, r2, #0
 8003a2e:	6822      	ldr	r2, [r4, #0]
 8003a30:	bf18      	it	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	0692      	lsls	r2, r2, #26
 8003a36:	d42b      	bmi.n	8003a90 <_printf_common+0xb0>
 8003a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a3c:	4649      	mov	r1, r9
 8003a3e:	4638      	mov	r0, r7
 8003a40:	47c0      	blx	r8
 8003a42:	3001      	adds	r0, #1
 8003a44:	d01e      	beq.n	8003a84 <_printf_common+0xa4>
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	68e5      	ldr	r5, [r4, #12]
 8003a4a:	6832      	ldr	r2, [r6, #0]
 8003a4c:	f003 0306 	and.w	r3, r3, #6
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	bf08      	it	eq
 8003a54:	1aad      	subeq	r5, r5, r2
 8003a56:	68a3      	ldr	r3, [r4, #8]
 8003a58:	6922      	ldr	r2, [r4, #16]
 8003a5a:	bf0c      	ite	eq
 8003a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a60:	2500      	movne	r5, #0
 8003a62:	4293      	cmp	r3, r2
 8003a64:	bfc4      	itt	gt
 8003a66:	1a9b      	subgt	r3, r3, r2
 8003a68:	18ed      	addgt	r5, r5, r3
 8003a6a:	2600      	movs	r6, #0
 8003a6c:	341a      	adds	r4, #26
 8003a6e:	42b5      	cmp	r5, r6
 8003a70:	d11a      	bne.n	8003aa8 <_printf_common+0xc8>
 8003a72:	2000      	movs	r0, #0
 8003a74:	e008      	b.n	8003a88 <_printf_common+0xa8>
 8003a76:	2301      	movs	r3, #1
 8003a78:	4652      	mov	r2, sl
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	4638      	mov	r0, r7
 8003a7e:	47c0      	blx	r8
 8003a80:	3001      	adds	r0, #1
 8003a82:	d103      	bne.n	8003a8c <_printf_common+0xac>
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295
 8003a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a8c:	3501      	adds	r5, #1
 8003a8e:	e7c6      	b.n	8003a1e <_printf_common+0x3e>
 8003a90:	18e1      	adds	r1, r4, r3
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	2030      	movs	r0, #48	; 0x30
 8003a96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a9a:	4422      	add	r2, r4
 8003a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003aa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003aa4:	3302      	adds	r3, #2
 8003aa6:	e7c7      	b.n	8003a38 <_printf_common+0x58>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	4622      	mov	r2, r4
 8003aac:	4649      	mov	r1, r9
 8003aae:	4638      	mov	r0, r7
 8003ab0:	47c0      	blx	r8
 8003ab2:	3001      	adds	r0, #1
 8003ab4:	d0e6      	beq.n	8003a84 <_printf_common+0xa4>
 8003ab6:	3601      	adds	r6, #1
 8003ab8:	e7d9      	b.n	8003a6e <_printf_common+0x8e>
	...

08003abc <_printf_i>:
 8003abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	4691      	mov	r9, r2
 8003ac4:	7e27      	ldrb	r7, [r4, #24]
 8003ac6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ac8:	2f78      	cmp	r7, #120	; 0x78
 8003aca:	4680      	mov	r8, r0
 8003acc:	469a      	mov	sl, r3
 8003ace:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ad2:	d807      	bhi.n	8003ae4 <_printf_i+0x28>
 8003ad4:	2f62      	cmp	r7, #98	; 0x62
 8003ad6:	d80a      	bhi.n	8003aee <_printf_i+0x32>
 8003ad8:	2f00      	cmp	r7, #0
 8003ada:	f000 80d8 	beq.w	8003c8e <_printf_i+0x1d2>
 8003ade:	2f58      	cmp	r7, #88	; 0x58
 8003ae0:	f000 80a3 	beq.w	8003c2a <_printf_i+0x16e>
 8003ae4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003aec:	e03a      	b.n	8003b64 <_printf_i+0xa8>
 8003aee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003af2:	2b15      	cmp	r3, #21
 8003af4:	d8f6      	bhi.n	8003ae4 <_printf_i+0x28>
 8003af6:	a001      	add	r0, pc, #4	; (adr r0, 8003afc <_printf_i+0x40>)
 8003af8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003afc:	08003b55 	.word	0x08003b55
 8003b00:	08003b69 	.word	0x08003b69
 8003b04:	08003ae5 	.word	0x08003ae5
 8003b08:	08003ae5 	.word	0x08003ae5
 8003b0c:	08003ae5 	.word	0x08003ae5
 8003b10:	08003ae5 	.word	0x08003ae5
 8003b14:	08003b69 	.word	0x08003b69
 8003b18:	08003ae5 	.word	0x08003ae5
 8003b1c:	08003ae5 	.word	0x08003ae5
 8003b20:	08003ae5 	.word	0x08003ae5
 8003b24:	08003ae5 	.word	0x08003ae5
 8003b28:	08003c75 	.word	0x08003c75
 8003b2c:	08003b99 	.word	0x08003b99
 8003b30:	08003c57 	.word	0x08003c57
 8003b34:	08003ae5 	.word	0x08003ae5
 8003b38:	08003ae5 	.word	0x08003ae5
 8003b3c:	08003c97 	.word	0x08003c97
 8003b40:	08003ae5 	.word	0x08003ae5
 8003b44:	08003b99 	.word	0x08003b99
 8003b48:	08003ae5 	.word	0x08003ae5
 8003b4c:	08003ae5 	.word	0x08003ae5
 8003b50:	08003c5f 	.word	0x08003c5f
 8003b54:	680b      	ldr	r3, [r1, #0]
 8003b56:	1d1a      	adds	r2, r3, #4
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	600a      	str	r2, [r1, #0]
 8003b5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0a3      	b.n	8003cb0 <_printf_i+0x1f4>
 8003b68:	6825      	ldr	r5, [r4, #0]
 8003b6a:	6808      	ldr	r0, [r1, #0]
 8003b6c:	062e      	lsls	r6, r5, #24
 8003b6e:	f100 0304 	add.w	r3, r0, #4
 8003b72:	d50a      	bpl.n	8003b8a <_printf_i+0xce>
 8003b74:	6805      	ldr	r5, [r0, #0]
 8003b76:	600b      	str	r3, [r1, #0]
 8003b78:	2d00      	cmp	r5, #0
 8003b7a:	da03      	bge.n	8003b84 <_printf_i+0xc8>
 8003b7c:	232d      	movs	r3, #45	; 0x2d
 8003b7e:	426d      	negs	r5, r5
 8003b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b84:	485e      	ldr	r0, [pc, #376]	; (8003d00 <_printf_i+0x244>)
 8003b86:	230a      	movs	r3, #10
 8003b88:	e019      	b.n	8003bbe <_printf_i+0x102>
 8003b8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b8e:	6805      	ldr	r5, [r0, #0]
 8003b90:	600b      	str	r3, [r1, #0]
 8003b92:	bf18      	it	ne
 8003b94:	b22d      	sxthne	r5, r5
 8003b96:	e7ef      	b.n	8003b78 <_printf_i+0xbc>
 8003b98:	680b      	ldr	r3, [r1, #0]
 8003b9a:	6825      	ldr	r5, [r4, #0]
 8003b9c:	1d18      	adds	r0, r3, #4
 8003b9e:	6008      	str	r0, [r1, #0]
 8003ba0:	0628      	lsls	r0, r5, #24
 8003ba2:	d501      	bpl.n	8003ba8 <_printf_i+0xec>
 8003ba4:	681d      	ldr	r5, [r3, #0]
 8003ba6:	e002      	b.n	8003bae <_printf_i+0xf2>
 8003ba8:	0669      	lsls	r1, r5, #25
 8003baa:	d5fb      	bpl.n	8003ba4 <_printf_i+0xe8>
 8003bac:	881d      	ldrh	r5, [r3, #0]
 8003bae:	4854      	ldr	r0, [pc, #336]	; (8003d00 <_printf_i+0x244>)
 8003bb0:	2f6f      	cmp	r7, #111	; 0x6f
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2308      	moveq	r3, #8
 8003bb6:	230a      	movne	r3, #10
 8003bb8:	2100      	movs	r1, #0
 8003bba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bbe:	6866      	ldr	r6, [r4, #4]
 8003bc0:	60a6      	str	r6, [r4, #8]
 8003bc2:	2e00      	cmp	r6, #0
 8003bc4:	bfa2      	ittt	ge
 8003bc6:	6821      	ldrge	r1, [r4, #0]
 8003bc8:	f021 0104 	bicge.w	r1, r1, #4
 8003bcc:	6021      	strge	r1, [r4, #0]
 8003bce:	b90d      	cbnz	r5, 8003bd4 <_printf_i+0x118>
 8003bd0:	2e00      	cmp	r6, #0
 8003bd2:	d04d      	beq.n	8003c70 <_printf_i+0x1b4>
 8003bd4:	4616      	mov	r6, r2
 8003bd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bda:	fb03 5711 	mls	r7, r3, r1, r5
 8003bde:	5dc7      	ldrb	r7, [r0, r7]
 8003be0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003be4:	462f      	mov	r7, r5
 8003be6:	42bb      	cmp	r3, r7
 8003be8:	460d      	mov	r5, r1
 8003bea:	d9f4      	bls.n	8003bd6 <_printf_i+0x11a>
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d10b      	bne.n	8003c08 <_printf_i+0x14c>
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	07df      	lsls	r7, r3, #31
 8003bf4:	d508      	bpl.n	8003c08 <_printf_i+0x14c>
 8003bf6:	6923      	ldr	r3, [r4, #16]
 8003bf8:	6861      	ldr	r1, [r4, #4]
 8003bfa:	4299      	cmp	r1, r3
 8003bfc:	bfde      	ittt	le
 8003bfe:	2330      	movle	r3, #48	; 0x30
 8003c00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c08:	1b92      	subs	r2, r2, r6
 8003c0a:	6122      	str	r2, [r4, #16]
 8003c0c:	f8cd a000 	str.w	sl, [sp]
 8003c10:	464b      	mov	r3, r9
 8003c12:	aa03      	add	r2, sp, #12
 8003c14:	4621      	mov	r1, r4
 8003c16:	4640      	mov	r0, r8
 8003c18:	f7ff fee2 	bl	80039e0 <_printf_common>
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d14c      	bne.n	8003cba <_printf_i+0x1fe>
 8003c20:	f04f 30ff 	mov.w	r0, #4294967295
 8003c24:	b004      	add	sp, #16
 8003c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c2a:	4835      	ldr	r0, [pc, #212]	; (8003d00 <_printf_i+0x244>)
 8003c2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	680e      	ldr	r6, [r1, #0]
 8003c34:	061f      	lsls	r7, r3, #24
 8003c36:	f856 5b04 	ldr.w	r5, [r6], #4
 8003c3a:	600e      	str	r6, [r1, #0]
 8003c3c:	d514      	bpl.n	8003c68 <_printf_i+0x1ac>
 8003c3e:	07d9      	lsls	r1, r3, #31
 8003c40:	bf44      	itt	mi
 8003c42:	f043 0320 	orrmi.w	r3, r3, #32
 8003c46:	6023      	strmi	r3, [r4, #0]
 8003c48:	b91d      	cbnz	r5, 8003c52 <_printf_i+0x196>
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	f023 0320 	bic.w	r3, r3, #32
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	2310      	movs	r3, #16
 8003c54:	e7b0      	b.n	8003bb8 <_printf_i+0xfc>
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	f043 0320 	orr.w	r3, r3, #32
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	2378      	movs	r3, #120	; 0x78
 8003c60:	4828      	ldr	r0, [pc, #160]	; (8003d04 <_printf_i+0x248>)
 8003c62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c66:	e7e3      	b.n	8003c30 <_printf_i+0x174>
 8003c68:	065e      	lsls	r6, r3, #25
 8003c6a:	bf48      	it	mi
 8003c6c:	b2ad      	uxthmi	r5, r5
 8003c6e:	e7e6      	b.n	8003c3e <_printf_i+0x182>
 8003c70:	4616      	mov	r6, r2
 8003c72:	e7bb      	b.n	8003bec <_printf_i+0x130>
 8003c74:	680b      	ldr	r3, [r1, #0]
 8003c76:	6826      	ldr	r6, [r4, #0]
 8003c78:	6960      	ldr	r0, [r4, #20]
 8003c7a:	1d1d      	adds	r5, r3, #4
 8003c7c:	600d      	str	r5, [r1, #0]
 8003c7e:	0635      	lsls	r5, r6, #24
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	d501      	bpl.n	8003c88 <_printf_i+0x1cc>
 8003c84:	6018      	str	r0, [r3, #0]
 8003c86:	e002      	b.n	8003c8e <_printf_i+0x1d2>
 8003c88:	0671      	lsls	r1, r6, #25
 8003c8a:	d5fb      	bpl.n	8003c84 <_printf_i+0x1c8>
 8003c8c:	8018      	strh	r0, [r3, #0]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	6123      	str	r3, [r4, #16]
 8003c92:	4616      	mov	r6, r2
 8003c94:	e7ba      	b.n	8003c0c <_printf_i+0x150>
 8003c96:	680b      	ldr	r3, [r1, #0]
 8003c98:	1d1a      	adds	r2, r3, #4
 8003c9a:	600a      	str	r2, [r1, #0]
 8003c9c:	681e      	ldr	r6, [r3, #0]
 8003c9e:	6862      	ldr	r2, [r4, #4]
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	f7fc faa4 	bl	80001f0 <memchr>
 8003ca8:	b108      	cbz	r0, 8003cae <_printf_i+0x1f2>
 8003caa:	1b80      	subs	r0, r0, r6
 8003cac:	6060      	str	r0, [r4, #4]
 8003cae:	6863      	ldr	r3, [r4, #4]
 8003cb0:	6123      	str	r3, [r4, #16]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cb8:	e7a8      	b.n	8003c0c <_printf_i+0x150>
 8003cba:	6923      	ldr	r3, [r4, #16]
 8003cbc:	4632      	mov	r2, r6
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	4640      	mov	r0, r8
 8003cc2:	47d0      	blx	sl
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d0ab      	beq.n	8003c20 <_printf_i+0x164>
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	079b      	lsls	r3, r3, #30
 8003ccc:	d413      	bmi.n	8003cf6 <_printf_i+0x23a>
 8003cce:	68e0      	ldr	r0, [r4, #12]
 8003cd0:	9b03      	ldr	r3, [sp, #12]
 8003cd2:	4298      	cmp	r0, r3
 8003cd4:	bfb8      	it	lt
 8003cd6:	4618      	movlt	r0, r3
 8003cd8:	e7a4      	b.n	8003c24 <_printf_i+0x168>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	4632      	mov	r2, r6
 8003cde:	4649      	mov	r1, r9
 8003ce0:	4640      	mov	r0, r8
 8003ce2:	47d0      	blx	sl
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d09b      	beq.n	8003c20 <_printf_i+0x164>
 8003ce8:	3501      	adds	r5, #1
 8003cea:	68e3      	ldr	r3, [r4, #12]
 8003cec:	9903      	ldr	r1, [sp, #12]
 8003cee:	1a5b      	subs	r3, r3, r1
 8003cf0:	42ab      	cmp	r3, r5
 8003cf2:	dcf2      	bgt.n	8003cda <_printf_i+0x21e>
 8003cf4:	e7eb      	b.n	8003cce <_printf_i+0x212>
 8003cf6:	2500      	movs	r5, #0
 8003cf8:	f104 0619 	add.w	r6, r4, #25
 8003cfc:	e7f5      	b.n	8003cea <_printf_i+0x22e>
 8003cfe:	bf00      	nop
 8003d00:	08003fbd 	.word	0x08003fbd
 8003d04:	08003fce 	.word	0x08003fce

08003d08 <memcpy>:
 8003d08:	440a      	add	r2, r1
 8003d0a:	4291      	cmp	r1, r2
 8003d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d10:	d100      	bne.n	8003d14 <memcpy+0xc>
 8003d12:	4770      	bx	lr
 8003d14:	b510      	push	{r4, lr}
 8003d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d1e:	4291      	cmp	r1, r2
 8003d20:	d1f9      	bne.n	8003d16 <memcpy+0xe>
 8003d22:	bd10      	pop	{r4, pc}

08003d24 <memmove>:
 8003d24:	4288      	cmp	r0, r1
 8003d26:	b510      	push	{r4, lr}
 8003d28:	eb01 0402 	add.w	r4, r1, r2
 8003d2c:	d902      	bls.n	8003d34 <memmove+0x10>
 8003d2e:	4284      	cmp	r4, r0
 8003d30:	4623      	mov	r3, r4
 8003d32:	d807      	bhi.n	8003d44 <memmove+0x20>
 8003d34:	1e43      	subs	r3, r0, #1
 8003d36:	42a1      	cmp	r1, r4
 8003d38:	d008      	beq.n	8003d4c <memmove+0x28>
 8003d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d42:	e7f8      	b.n	8003d36 <memmove+0x12>
 8003d44:	4402      	add	r2, r0
 8003d46:	4601      	mov	r1, r0
 8003d48:	428a      	cmp	r2, r1
 8003d4a:	d100      	bne.n	8003d4e <memmove+0x2a>
 8003d4c:	bd10      	pop	{r4, pc}
 8003d4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d56:	e7f7      	b.n	8003d48 <memmove+0x24>

08003d58 <_free_r>:
 8003d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d5a:	2900      	cmp	r1, #0
 8003d5c:	d048      	beq.n	8003df0 <_free_r+0x98>
 8003d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d62:	9001      	str	r0, [sp, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f1a1 0404 	sub.w	r4, r1, #4
 8003d6a:	bfb8      	it	lt
 8003d6c:	18e4      	addlt	r4, r4, r3
 8003d6e:	f000 f8d3 	bl	8003f18 <__malloc_lock>
 8003d72:	4a20      	ldr	r2, [pc, #128]	; (8003df4 <_free_r+0x9c>)
 8003d74:	9801      	ldr	r0, [sp, #4]
 8003d76:	6813      	ldr	r3, [r2, #0]
 8003d78:	4615      	mov	r5, r2
 8003d7a:	b933      	cbnz	r3, 8003d8a <_free_r+0x32>
 8003d7c:	6063      	str	r3, [r4, #4]
 8003d7e:	6014      	str	r4, [r2, #0]
 8003d80:	b003      	add	sp, #12
 8003d82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d86:	f000 b8cd 	b.w	8003f24 <__malloc_unlock>
 8003d8a:	42a3      	cmp	r3, r4
 8003d8c:	d90b      	bls.n	8003da6 <_free_r+0x4e>
 8003d8e:	6821      	ldr	r1, [r4, #0]
 8003d90:	1862      	adds	r2, r4, r1
 8003d92:	4293      	cmp	r3, r2
 8003d94:	bf04      	itt	eq
 8003d96:	681a      	ldreq	r2, [r3, #0]
 8003d98:	685b      	ldreq	r3, [r3, #4]
 8003d9a:	6063      	str	r3, [r4, #4]
 8003d9c:	bf04      	itt	eq
 8003d9e:	1852      	addeq	r2, r2, r1
 8003da0:	6022      	streq	r2, [r4, #0]
 8003da2:	602c      	str	r4, [r5, #0]
 8003da4:	e7ec      	b.n	8003d80 <_free_r+0x28>
 8003da6:	461a      	mov	r2, r3
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	b10b      	cbz	r3, 8003db0 <_free_r+0x58>
 8003dac:	42a3      	cmp	r3, r4
 8003dae:	d9fa      	bls.n	8003da6 <_free_r+0x4e>
 8003db0:	6811      	ldr	r1, [r2, #0]
 8003db2:	1855      	adds	r5, r2, r1
 8003db4:	42a5      	cmp	r5, r4
 8003db6:	d10b      	bne.n	8003dd0 <_free_r+0x78>
 8003db8:	6824      	ldr	r4, [r4, #0]
 8003dba:	4421      	add	r1, r4
 8003dbc:	1854      	adds	r4, r2, r1
 8003dbe:	42a3      	cmp	r3, r4
 8003dc0:	6011      	str	r1, [r2, #0]
 8003dc2:	d1dd      	bne.n	8003d80 <_free_r+0x28>
 8003dc4:	681c      	ldr	r4, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	6053      	str	r3, [r2, #4]
 8003dca:	4421      	add	r1, r4
 8003dcc:	6011      	str	r1, [r2, #0]
 8003dce:	e7d7      	b.n	8003d80 <_free_r+0x28>
 8003dd0:	d902      	bls.n	8003dd8 <_free_r+0x80>
 8003dd2:	230c      	movs	r3, #12
 8003dd4:	6003      	str	r3, [r0, #0]
 8003dd6:	e7d3      	b.n	8003d80 <_free_r+0x28>
 8003dd8:	6825      	ldr	r5, [r4, #0]
 8003dda:	1961      	adds	r1, r4, r5
 8003ddc:	428b      	cmp	r3, r1
 8003dde:	bf04      	itt	eq
 8003de0:	6819      	ldreq	r1, [r3, #0]
 8003de2:	685b      	ldreq	r3, [r3, #4]
 8003de4:	6063      	str	r3, [r4, #4]
 8003de6:	bf04      	itt	eq
 8003de8:	1949      	addeq	r1, r1, r5
 8003dea:	6021      	streq	r1, [r4, #0]
 8003dec:	6054      	str	r4, [r2, #4]
 8003dee:	e7c7      	b.n	8003d80 <_free_r+0x28>
 8003df0:	b003      	add	sp, #12
 8003df2:	bd30      	pop	{r4, r5, pc}
 8003df4:	200001f4 	.word	0x200001f4

08003df8 <_malloc_r>:
 8003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfa:	1ccd      	adds	r5, r1, #3
 8003dfc:	f025 0503 	bic.w	r5, r5, #3
 8003e00:	3508      	adds	r5, #8
 8003e02:	2d0c      	cmp	r5, #12
 8003e04:	bf38      	it	cc
 8003e06:	250c      	movcc	r5, #12
 8003e08:	2d00      	cmp	r5, #0
 8003e0a:	4606      	mov	r6, r0
 8003e0c:	db01      	blt.n	8003e12 <_malloc_r+0x1a>
 8003e0e:	42a9      	cmp	r1, r5
 8003e10:	d903      	bls.n	8003e1a <_malloc_r+0x22>
 8003e12:	230c      	movs	r3, #12
 8003e14:	6033      	str	r3, [r6, #0]
 8003e16:	2000      	movs	r0, #0
 8003e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e1a:	f000 f87d 	bl	8003f18 <__malloc_lock>
 8003e1e:	4921      	ldr	r1, [pc, #132]	; (8003ea4 <_malloc_r+0xac>)
 8003e20:	680a      	ldr	r2, [r1, #0]
 8003e22:	4614      	mov	r4, r2
 8003e24:	b99c      	cbnz	r4, 8003e4e <_malloc_r+0x56>
 8003e26:	4f20      	ldr	r7, [pc, #128]	; (8003ea8 <_malloc_r+0xb0>)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	b923      	cbnz	r3, 8003e36 <_malloc_r+0x3e>
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	4630      	mov	r0, r6
 8003e30:	f000 f862 	bl	8003ef8 <_sbrk_r>
 8003e34:	6038      	str	r0, [r7, #0]
 8003e36:	4629      	mov	r1, r5
 8003e38:	4630      	mov	r0, r6
 8003e3a:	f000 f85d 	bl	8003ef8 <_sbrk_r>
 8003e3e:	1c43      	adds	r3, r0, #1
 8003e40:	d123      	bne.n	8003e8a <_malloc_r+0x92>
 8003e42:	230c      	movs	r3, #12
 8003e44:	6033      	str	r3, [r6, #0]
 8003e46:	4630      	mov	r0, r6
 8003e48:	f000 f86c 	bl	8003f24 <__malloc_unlock>
 8003e4c:	e7e3      	b.n	8003e16 <_malloc_r+0x1e>
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	1b5b      	subs	r3, r3, r5
 8003e52:	d417      	bmi.n	8003e84 <_malloc_r+0x8c>
 8003e54:	2b0b      	cmp	r3, #11
 8003e56:	d903      	bls.n	8003e60 <_malloc_r+0x68>
 8003e58:	6023      	str	r3, [r4, #0]
 8003e5a:	441c      	add	r4, r3
 8003e5c:	6025      	str	r5, [r4, #0]
 8003e5e:	e004      	b.n	8003e6a <_malloc_r+0x72>
 8003e60:	6863      	ldr	r3, [r4, #4]
 8003e62:	42a2      	cmp	r2, r4
 8003e64:	bf0c      	ite	eq
 8003e66:	600b      	streq	r3, [r1, #0]
 8003e68:	6053      	strne	r3, [r2, #4]
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	f000 f85a 	bl	8003f24 <__malloc_unlock>
 8003e70:	f104 000b 	add.w	r0, r4, #11
 8003e74:	1d23      	adds	r3, r4, #4
 8003e76:	f020 0007 	bic.w	r0, r0, #7
 8003e7a:	1ac2      	subs	r2, r0, r3
 8003e7c:	d0cc      	beq.n	8003e18 <_malloc_r+0x20>
 8003e7e:	1a1b      	subs	r3, r3, r0
 8003e80:	50a3      	str	r3, [r4, r2]
 8003e82:	e7c9      	b.n	8003e18 <_malloc_r+0x20>
 8003e84:	4622      	mov	r2, r4
 8003e86:	6864      	ldr	r4, [r4, #4]
 8003e88:	e7cc      	b.n	8003e24 <_malloc_r+0x2c>
 8003e8a:	1cc4      	adds	r4, r0, #3
 8003e8c:	f024 0403 	bic.w	r4, r4, #3
 8003e90:	42a0      	cmp	r0, r4
 8003e92:	d0e3      	beq.n	8003e5c <_malloc_r+0x64>
 8003e94:	1a21      	subs	r1, r4, r0
 8003e96:	4630      	mov	r0, r6
 8003e98:	f000 f82e 	bl	8003ef8 <_sbrk_r>
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d1dd      	bne.n	8003e5c <_malloc_r+0x64>
 8003ea0:	e7cf      	b.n	8003e42 <_malloc_r+0x4a>
 8003ea2:	bf00      	nop
 8003ea4:	200001f4 	.word	0x200001f4
 8003ea8:	200001f8 	.word	0x200001f8

08003eac <_realloc_r>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	4607      	mov	r7, r0
 8003eb0:	4614      	mov	r4, r2
 8003eb2:	460e      	mov	r6, r1
 8003eb4:	b921      	cbnz	r1, 8003ec0 <_realloc_r+0x14>
 8003eb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003eba:	4611      	mov	r1, r2
 8003ebc:	f7ff bf9c 	b.w	8003df8 <_malloc_r>
 8003ec0:	b922      	cbnz	r2, 8003ecc <_realloc_r+0x20>
 8003ec2:	f7ff ff49 	bl	8003d58 <_free_r>
 8003ec6:	4625      	mov	r5, r4
 8003ec8:	4628      	mov	r0, r5
 8003eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ecc:	f000 f830 	bl	8003f30 <_malloc_usable_size_r>
 8003ed0:	42a0      	cmp	r0, r4
 8003ed2:	d20f      	bcs.n	8003ef4 <_realloc_r+0x48>
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	f7ff ff8e 	bl	8003df8 <_malloc_r>
 8003edc:	4605      	mov	r5, r0
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	d0f2      	beq.n	8003ec8 <_realloc_r+0x1c>
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4622      	mov	r2, r4
 8003ee6:	f7ff ff0f 	bl	8003d08 <memcpy>
 8003eea:	4631      	mov	r1, r6
 8003eec:	4638      	mov	r0, r7
 8003eee:	f7ff ff33 	bl	8003d58 <_free_r>
 8003ef2:	e7e9      	b.n	8003ec8 <_realloc_r+0x1c>
 8003ef4:	4635      	mov	r5, r6
 8003ef6:	e7e7      	b.n	8003ec8 <_realloc_r+0x1c>

08003ef8 <_sbrk_r>:
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	4d06      	ldr	r5, [pc, #24]	; (8003f14 <_sbrk_r+0x1c>)
 8003efc:	2300      	movs	r3, #0
 8003efe:	4604      	mov	r4, r0
 8003f00:	4608      	mov	r0, r1
 8003f02:	602b      	str	r3, [r5, #0]
 8003f04:	f7fd fc8a 	bl	800181c <_sbrk>
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	d102      	bne.n	8003f12 <_sbrk_r+0x1a>
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	b103      	cbz	r3, 8003f12 <_sbrk_r+0x1a>
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	bd38      	pop	{r3, r4, r5, pc}
 8003f14:	2000025c 	.word	0x2000025c

08003f18 <__malloc_lock>:
 8003f18:	4801      	ldr	r0, [pc, #4]	; (8003f20 <__malloc_lock+0x8>)
 8003f1a:	f000 b811 	b.w	8003f40 <__retarget_lock_acquire_recursive>
 8003f1e:	bf00      	nop
 8003f20:	20000264 	.word	0x20000264

08003f24 <__malloc_unlock>:
 8003f24:	4801      	ldr	r0, [pc, #4]	; (8003f2c <__malloc_unlock+0x8>)
 8003f26:	f000 b80c 	b.w	8003f42 <__retarget_lock_release_recursive>
 8003f2a:	bf00      	nop
 8003f2c:	20000264 	.word	0x20000264

08003f30 <_malloc_usable_size_r>:
 8003f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f34:	1f18      	subs	r0, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bfbc      	itt	lt
 8003f3a:	580b      	ldrlt	r3, [r1, r0]
 8003f3c:	18c0      	addlt	r0, r0, r3
 8003f3e:	4770      	bx	lr

08003f40 <__retarget_lock_acquire_recursive>:
 8003f40:	4770      	bx	lr

08003f42 <__retarget_lock_release_recursive>:
 8003f42:	4770      	bx	lr

08003f44 <_init>:
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	bf00      	nop
 8003f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4a:	bc08      	pop	{r3}
 8003f4c:	469e      	mov	lr, r3
 8003f4e:	4770      	bx	lr

08003f50 <_fini>:
 8003f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f52:	bf00      	nop
 8003f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f56:	bc08      	pop	{r3}
 8003f58:	469e      	mov	lr, r3
 8003f5a:	4770      	bx	lr
